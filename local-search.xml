<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Processing(Introduction and Interactive Program)</title>
    <link href="/2023zjude-10-36/2024/01/02/prcessing1/"/>
    <url>/2023zjude-10-36/2024/01/02/prcessing1/</url>
    
    <content type="html"><![CDATA[<h1 id="Processing-Introduction"><a href="#Processing-Introduction" class="headerlink" title="Processing Introduction"></a>Processing Introduction</h1><p>Processing is a programming language and integrated development environment (IDE) for creative coding and visualization. It is designed to allow artists, designers and non-programmers to easily learn to code and create a variety of projects such as graphics, animation and audio applications through visualization and interactivity. The Processing language is based on Java, but is much simpler for beginners to understand.<br><img src="/2023zjude-10-36/img/processing4/1.png"></p><h2 id="Characteristics-of-Processing"><a href="#Characteristics-of-Processing" class="headerlink" title="Characteristics of Processing"></a>Characteristics of Processing</h2><p>Processing is a programming language and integrated development environment (IDE) for creative coding and visualization. Here are some key features:</p><ol><li><p>For artists and designers: Processing is designed to make it easy for non-programmers, especially artists and designers, to learn and use programming. The syntax is relatively simple and easy to understand, making it easier for beginners to get started.</p></li><li><p>Visualization and interactivity: Processing provides a rich graphics and animation library that enables users to create complex visualizations by writing relatively simple code. Interactivity is also an important feature, and users can interact with their projects in real time through input devices such as mouse and keyboard.</p></li><li><p>Based on Java: The Processing language is based on the Java programming language, which means that users can take advantage of the power of Java while easing the learning curve by using the simplified syntax of Processing.</p></li><li><p>Cross-platform: Processing is cross-platform and can run on multiple operating systems, including Windows, macOS, and Linux.</p></li><li><p>Open Source: Processing is open source, which means that users can access and modify its source code to meet specific needs or contribute to the community.</p></li></ol><h2 id="Basic-Processing-operations"><a href="#Basic-Processing-operations" class="headerlink" title="Basic Processing operations"></a>Basic Processing operations</h2><p>Processing provides a series of basic operations, so that users can easily draw, interact, and animation operations. Here are some common basic operations in Processing:</p><ol><li>Draw the basic shape:</li></ol><ul><li>point(x, y) : Draws a point at the specified position.</li><li>line(x1, y1, x2, y2) : Draws a straight line.</li><li>rect(x, y, width, height) : Draws a rectangle.</li><li>ellipse(x, y, width, height) : Draws an ellipse.</li></ul><ol start="2"><li>Set the color:</li></ol><ul><li>fill(r, g, b) : Set the fill color.</li><li>stroke(r, g, b) : Sets the stroke color.</li><li>background(r, g, b) : sets the background color.</li></ul><ol start="3"><li>Text manipulation:</li></ol><ul><li>text(“Hello”, x, y) : Draws text at the specified location.</li><li>textSize(size) : specifies the text size.</li><li>textAlign(LEFT|CENTER|RIGHT) : Sets the text alignment mode.</li></ul><ol start="4"><li>Interaction:</li></ol><ul><li>mouseX and mouseY: Obtain the current position of the mouse.</li><li>mousePressed and mouseReleased: detects the mouse press and release.</li><li>keyPressed and keyReleased: Detects keyboard press and release events.</li></ul><ol start="5"><li>Animation:</li></ol><ul><li>setup() : Sets initialization parameters, which are executed only once at the beginning of a program.</li><li>draw() : Executes on each frame to draw an animation.</li><li>frameRate(fps) : Sets the frame rate for animation.</li></ul><ol start="6"><li>Arrays and loops:</li></ol><ul><li>int[] arr &#x3D; {1, 2, 3} : Creates an array of integers.</li><li>for (int i &#x3D; 0;  i &lt; arr.length;  i++) { …  } : Loops through groups of numbers.</li></ul><p>The following shows the basic operations in the form of code blocks</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 设置初始化参数，只在程序开始时执行一次</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  size(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>); <span class="hljs-comment">// 设置画布大小</span><br>  background(<span class="hljs-number">255</span>); <span class="hljs-comment">// 设置背景颜色为白色</span><br>&#125;<br><br><span class="hljs-comment">// 在每一帧都执行，用于绘制动画</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// 获取鼠标当前位置</span><br>  <span class="hljs-type">float</span> <span class="hljs-variable">mouseXPos</span> <span class="hljs-operator">=</span> mouseX;<br>  <span class="hljs-type">float</span> <span class="hljs-variable">mouseYPos</span> <span class="hljs-operator">=</span> mouseY;<br><br>  <span class="hljs-comment">// 绘制点</span><br>  point(mouseXPos, mouseYPos);<br><br>  <span class="hljs-comment">// 设置填充颜色为红色</span><br>  fill(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-comment">// 绘制矩形</span><br>  rect(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><br>  <span class="hljs-comment">// 设置文本大小</span><br>  textSize(<span class="hljs-number">20</span>);<br>  <span class="hljs-comment">// 绘制文本</span><br>  text(<span class="hljs-string">&quot;Hello, Processing!&quot;</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>&#125;<br><br><span class="hljs-comment">// 检测鼠标按下事件</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">mousePressed</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// 设置描边颜色为蓝色</span><br>  stroke(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>);<br>  <span class="hljs-comment">// 绘制椭圆</span><br>  ellipse(<span class="hljs-number">300</span>, <span class="hljs-number">300</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Interesting-use-of-Processing"><a href="#Interesting-use-of-Processing" class="headerlink" title="Interesting use of Processing"></a>Interesting use of Processing</h2><p>Beyond these basic operations, processing can be used in many more interesting ways.</p><p>Image processing: Methods of importing pictures and processing pictures</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java">PImage img;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  size(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>  img = loadImage(<span class="hljs-string">&quot;image.jpg&quot;</span>); <span class="hljs-comment">// 加载图像</span><br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>  image(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height); <span class="hljs-comment">// 绘制图像</span><br>  filter(GRAY); <span class="hljs-comment">// 将图像转为灰度</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Sound-processing-Method-of-importing-sound"><a href="#Sound-processing-Method-of-importing-sound" class="headerlink" title="Sound processing: Method of importing sound"></a>Sound processing: Method of importing sound</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> processiSound processing: Method of importing soundng.sound.*;<br><br>SoundFile sound;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  size(<span class="hljs-number">400</span>, <span class="hljs-number">200</span>);<br>  sound = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoundFile</span>(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;sound.mp3&quot;</span>); <span class="hljs-comment">// 加载音频文件</span><br>  sound.play(); <span class="hljs-comment">// 播放音频</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3D-drawing-Generate-SD-cubes-that-can-be-moved"><a href="#3D-drawing-Generate-SD-cubes-that-can-be-moved" class="headerlink" title="3D drawing: Generate SD cubes that can be moved"></a>3D drawing: Generate SD cubes that can be moved</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">float</span> <span class="hljs-variable">angle</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  size(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>, P3D);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>  background(<span class="hljs-number">255</span>);<br>  translate(width / <span class="hljs-number">2</span>, height / <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  rotateX(angle);<br>  rotateY(angle * <span class="hljs-number">1.2</span>);<br>  box(<span class="hljs-number">100</span>); <span class="hljs-comment">// 绘制立方体</span><br>  angle += <span class="hljs-number">0.02</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023zjude-10-36/img/processing4/2.gif"></p><h1 id="Similar-tools-to-processing"><a href="#Similar-tools-to-processing" class="headerlink" title="Similar tools to processing"></a>Similar tools to processing</h1><p>In addition to processing, there are some other software that can support creative design with processing, such as p5.js, OpenFrameworks, Cinder, TouchDesigner, etc.</p><h3 id="p5-js"><a href="#p5-js" class="headerlink" title="p5.js:"></a>p5.js:</h3><p>p5.js is a JavaScript library designed to enable artists and designers to create interactive graphics and animations by writing simple code. It is a JavaScript version of Processing that supports Web development and runs in the browser.<br><img src="/2023zjude-10-36/img/processing4/3.png"></p><h3 id="OpenFrameworks"><a href="#OpenFrameworks" class="headerlink" title="OpenFrameworks:"></a>OpenFrameworks:</h3><p>OpenFrameworks is an open source C++ framework for creative programming and artistic creation. It offers a wealth of features, including libraries for graphics, image processing, audio, video, and computer vision, and is suitable for multiple platforms.<br><img src="/2023zjude-10-36/img/processing4/4.png"></p><h3 id="TouchDesigner"><a href="#TouchDesigner" class="headerlink" title="TouchDesigner"></a>TouchDesigner</h3><p>TouchDesigner (abbreviated TD) is a Node Base based visual programming language for real-time interactive multimedia content, developed by Toronto based Derivative. It is used by artists, programmers, creative coders, software designers and performers to create performance, installation and fixed media works.</p><p>Operation interface<br><img src="/2023zjude-10-36/img/processing4/5.png"><br>COMPs - Components - Components</p><p>Object components (3D objects), panel components (2D UI widgets) and other components. Components can contain other operators.</p><p><img src="/2023zjude-10-36/img/processing4/6.png"></p><p>Compared to other operand families, components (or COMPs) are unique because they contain their own network. To create a new network in your project, use the OP Create menu to create a new component and then select from the COMP signage. Then go into the new component and start building the network. A component network may contain operational units and&#x2F;or additional subnetworks (add-ons). Subnetworks create network hierarchies that can be navigated (using network paths) and form an overall hierarchy of.toe &#x2F;.tox files.</p><p>TOPs-Texture Operators - texture operands</p><p>All 2D image operations.</p><p>The texture operand, or TOP, is a fundamental aspect of almost every project. They are 2D texture operands that handle everything from video playback, 3D geometry rendering, composits, hardware image input and output, and are used to process everything that will be output to a monitor, projector, or LED display.</p><p><img src="/2023zjude-10-36/img/processing4/7.png"></p><p>CHOPs - Channel Operators - channel operators</p><p>Motion, audio, animation, control signals</p><p><img src="/2023zjude-10-36/img/processing4/8.png"></p><p>CHOP Series operators handle all channel operations, including Motion data, audio input, keyframe animation, hardware input (from Microsoft Kinect, Leap Motion, Oculus Rift, tablet, keyboard, mouse, etc.), DMX, MIDI, and OSC. These operators handle the input, processing and output of data used to communicate with many types of audiovisual equipment, such as:</p><ul><li>Mixers</li><li>MIDI controllers</li><li>synthesizer</li><li>DMX lighting fixtures</li><li>Microsoft Kinect camera</li><li>Computers running TouchDesigner</li><li>sound</li><li>Other audio-video applications such as Max&#x2F;MSP, Ableton Live, Resolume Arena</li><li>Pattern Expansion</li><li>SOP-Surface Operators - Surface Operators</li></ul><p>SOP-Surface Operators - Surface Operators</p><p>3D points, polygons and other 3D “primitives”<br><img src="/2023zjude-10-36/img/processing4/9.png"></p><p>SOP is an operator that can generate, import, modify and combine 3D surfaces (also known as geometry). The surface types are polygons, curves, NURBS surfaces, metaball and particles.</p><p>DAT-Data Operators - Data operation elements</p><p>ASCII text is organized as plain text, script, XML, or by cell table.</p><p><img src="/2023zjude-10-36/img/processing4/10.png"></p><p>Data operators (DAT) perform operations on data. They can edit, parse, create, send and receive data in various forms. These forms of data can include text strings, tables, Python scripts, XML, JSON, MIDI, serial, OSC, and so on.</p><p>The logic system relies heavily on the use of DAT and Python scripts. The ability to parse tables full of information and metadata, monitor other operators and their states, perform complex tasks based on incoming messages from other systems, etc., makes it possible to create fairly complex systems in TouchDesigner.</p><p>MATs-Material Operators - Material Operators</p><p>Materials and colourers.</p><p><img src="/2023zjude-10-36/img/processing4/11.png"></p><p>Material Operator (MAT) is used to create materials for geometry. You can apply them to geometry using the Material parameter on the Display page or any Object component.</p><p>The Phong MAT and GLSL MAT are designed to create more advanced shaders using TOPS and GLSL programs (pixel and vertex shaders) as inputs.</p><p>The most commonly used MAT is the Phong MAT</p><p>Parameter (Parameter)</p><p>Parameters in TouchDesigner exist only in operators (OP or “nodes”). Parameters include:</p><ul><li>numbers Indicates integers and floating point numbers</li><li>number pairs Pairs of numbers, triples or quadruples (e.g. width and height, XYZ position, RGBA color)</li><li>on-off flags Indicates the switch flag</li><li>menus directory</li><li>text strings Strings</li><li>Paths to other nodes in the TouchDesigner network</li><li>Button for initializing the action (uncommon)</li></ul><p>Links between parameters<br><img src="/2023zjude-10-36/img/processing4/12.png"></p><p>Export CHOP is a direct output, used if the value does not need to be adjusted</p><p>The Relative CHOP Reference is an expression with writable syntax, mainly Python syntax</p><h1 id="Processing-interaction"><a href="#Processing-interaction" class="headerlink" title="Processing interaction"></a>Processing interaction</h1><p>In Processing, you can use a mouse and keyboard to interact. Here is some sample code for basic mouse and keyboard interaction:</p><h2 id="Mouse-interaction："><a href="#Mouse-interaction：" class="headerlink" title="Mouse interaction："></a>Mouse interaction：</h2><h3 id="Detecting-mouse-position："><a href="#Detecting-mouse-position：" class="headerlink" title="Detecting mouse position："></a>Detecting mouse position：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  size(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>  background(<span class="hljs-number">255</span>);<br>  <span class="hljs-comment">// 获取鼠标当前位置</span><br>  <span class="hljs-type">float</span> <span class="hljs-variable">mouseXPos</span> <span class="hljs-operator">=</span> mouseX;<br>  <span class="hljs-type">float</span> <span class="hljs-variable">mouseYPos</span> <span class="hljs-operator">=</span> mouseY;<br>  <span class="hljs-comment">// 在鼠标位置绘制一个点</span><br>  point(mouseXPos, mouseYPos);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Detecting-mouse-buttons："><a href="#Detecting-mouse-buttons：" class="headerlink" title="Detecting mouse buttons："></a>Detecting mouse buttons：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  size(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>  background(<span class="hljs-number">255</span>);<br>  <span class="hljs-comment">// 如果鼠标左键按下，绘制一个矩形</span><br>  <span class="hljs-keyword">if</span> (mousePressed) &#123;<br>    fill(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>);<br>    rect(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023zjude-10-36/img/processing4/13.gif"></p><h2 id="Keyboard-interaction："><a href="#Keyboard-interaction：" class="headerlink" title="Keyboard interaction："></a>Keyboard interaction：</h2><h3 id="Detect-key："><a href="#Detect-key：" class="headerlink" title="Detect key："></a>Detect key：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  size(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>  background(<span class="hljs-number">255</span>);<br>&#125;<br><br><span class="hljs-comment">// 检测键盘按下事件</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// 如果按下键盘上的 &#x27;A&#x27; 键，绘制一个椭圆</span><br>  <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;A&#x27;</span> || key == <span class="hljs-string">&#x27;a&#x27;</span>) &#123;<br>    fill(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    ellipse(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023zjude-10-36/img/processing4/14.gif"></p><h3 id="Get-keyboard-keys："><a href="#Get-keyboard-keys：" class="headerlink" title="Get keyboard keys："></a>Get keyboard keys：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  size(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>  background(<span class="hljs-number">255</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// 获取按下的键的字符</span><br>  <span class="hljs-type">char</span> <span class="hljs-variable">keyChar</span> <span class="hljs-operator">=</span> key;<br>  <span class="hljs-comment">// 在画布中央绘制文本显示按下的键</span><br>  textSize(<span class="hljs-number">32</span>);<br>  textAlign(CENTER, CENTER);<br>  text(keyChar, width / <span class="hljs-number">2</span>, height / <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Here is a small example of using a mouse to produce a quantum effect.</p><p>Particle systems: Use the mouse to generate quantum interactions</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Java">ArrayList&lt;Particle&gt; particles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Particle&gt;();<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  size(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>  background(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">for</span> (Particle p : particles) &#123;<br>    p.update();<br>    p.display();<br>  &#125;<br>  <br><span class="hljs-comment">// 鼠标控制粒子</span><br>  <span class="hljs-keyword">if</span> (frameCount % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) &#123;<br>    particles.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Particle</span>(mouseX, mouseY));<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Particle</span> &#123;<br>  <span class="hljs-type">float</span> x, y, speedX, speedY;<br><br>  Particle(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y) &#123;<br>    <span class="hljs-built_in">this</span>.x = x;<br>    <span class="hljs-built_in">this</span>.y = y;<br>    <span class="hljs-built_in">this</span>.speedX = random(-<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">this</span>.speedY = random(-<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>    x += speedX;<br>    y += speedY;<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>    fill(<span class="hljs-number">255</span>, <span class="hljs-number">150</span>);<br>    ellipse(x, y, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023zjude-10-36/img/processing4/15.gif"></p>]]></content>
    
    
    <categories>
      
      <category>Interface application programming</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Processing with Kinect&amp;GUI</title>
    <link href="/2023zjude-10-36/2024/01/01/kinectGUI/"/>
    <url>/2023zjude-10-36/2024/01/01/kinectGUI/</url>
    
    <content type="html"><![CDATA[<h1 id="I-Experiment-Preparation"><a href="#I-Experiment-Preparation" class="headerlink" title="I. Experiment Preparation"></a>I. Experiment Preparation</h1><p>Experimental Tools: Processing 3.5</p><p>Experimental Equipment: Kinect v2.0</p><p>Dependencies: ControlP5, Kinect v2 for processing, PixelFlow</p><h1 id="II-Experiment-Steps"><a href="#II-Experiment-Steps" class="headerlink" title="II. Experiment Steps"></a>II. Experiment Steps</h1><ol><li><p>Use Processing to build an example system, to simulate particle generation and disturbance.</p></li><li><p>Implement a particle interaction mechanism via the mouse.</p></li><li><p>Recognize hand status through Kinect.</p></li><li><p>Design interactions based on the information recognized by Kinect.</p></li></ol><h1 id="III-Relevant-Introduction"><a href="#III-Relevant-Introduction" class="headerlink" title="III. Relevant Introduction"></a>III. Relevant Introduction</h1><p>Processing is a forward-looking, emerging computer language with a revolutionary concept: introducing programming languages in the context of electronic arts and introducing electronic arts concepts to programmers. It is an extension of the Java language and supports many of Java’s existing frameworks. However, it is much simpler in syntax and features many thoughtful and user-friendly designs. Processing can be used on operating systems such as Windows, MAC OS X, MAC OS 9, Linux, etc. The latest version is Processing 3.5.4. Works completed with Processing can function on a personal local machine or be exported to the web in the form of Java Applets.</p><p>Although Graphical User Interfaces (GUIs) became mainstream over twenty years ago, the teaching of basic programming languages still primarily uses command-line interfaces to this day. Why should learning a programming language be so dull? The human brain is naturally good at spatial recognition, and GUIs take advantage of this strength. Coupled with their ability to provide various real-time and vivid visual feedback, GUIs can significantly shorten the learning curve and help understand abstract logical principles. For example, a pixel on a computer screen is a visual representation of the value of a variable. Processing simplifies Java syntax and “sensualizes” its computational results, allowing users to quickly enjoy multimedia works with both sound and light.</p><p>The source code of Processing is open, much like the popular Linux operating system, Mozilla browser, or the Perl language. Users can freely tailor the most suitable usage pattern according to their needs. The applications of Processing are very diverse, and they all adhere to open-source rules. This design greatly increases the interaction and learning efficiency of the entire community.</p><p>Kinect is a body-sensing peripheral for the XBOX360 that Microsoft officially announced at the E3 Expo on June 2, 2009. Kinect completely revolutionizes the single-mode game operation and thoroughly embodies the concept of human-computer interaction.</p><p>It is a 3D motion-sensing camera (development codename “Project Natal”), integrating real-time motion capture, image recognition, microphone input, voice recognition, and community interaction functionalities. Players can use this technology to drive in games, interact with other players, and share pictures and information with other Xbox players through the internet.</p><p>Microsoft’s Kinect does not require any controller; it relies on a camera to capture the player’s movements in three-dimensional space. Microsoft points out that it will make the system easier to operate to attract the general public.</p><h1 id="IV-Experiment-Process"><a href="#IV-Experiment-Process" class="headerlink" title="IV. Experiment Process"></a>IV. Experiment Process</h1><p>Use Processing to build an example system to simulate the generation and disturbance of particles.<br><img src="/2023zjude-10-36/img/processing3/1.png"><br>Adjustments to the particle parameters in the interface can be made through the UI.<br><img src="/2023zjude-10-36/img/processing3/2.png"><br>Control the lifecycle of the disappearing particles.<br><img src="/2023zjude-10-36/img/processing3/3.png"><br>Design Interaction:</p><p>Left-click to disturb particles</p><p>Right-click to generate particles</p><p>Middle-click to create a cluster of particles</p><p>The code of interaction design is as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br><span class="hljs-keyword">if</span>(mouse_input &amp;&amp; mouseButton == LEFT)&#123;<br>  radius = <span class="hljs-number">15</span>;<br>  vscale = <span class="hljs-number">15</span>;<br>  px     = mouseX;<br>  py     = height-mouseY;<br>  vx     = (mouseX - pmouseX) * +vscale;<br>  vy     = (mouseY - pmouseY) * -vscale;<br><br><br><br>  fluid.addDensity (px, py, radius, <span class="hljs-number">0.25f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.1f</span>, <span class="hljs-number">1.0f</span>);<br>  fluid.addVelocity(px, py, radius, vx, vy);<br>  particles.spawn(fluid, px, py, radius*<span class="hljs-number">2</span>, <span class="hljs-number">300</span>);<br>&#125;    <br><br><span class="hljs-comment">// add impulse: density + velocity, particles</span><br><span class="hljs-keyword">if</span>(mouse_input &amp;&amp; mouseButton == LEFT)&#123;<br>  radius = <span class="hljs-number">15</span>;<br>  vscale = <span class="hljs-number">15</span>;<br>  px     = mouseX;<br>  py     = height-mouseY;<br>  vx     = (mouseX - pmouseX) * +vscale;<br>  vy     = (mouseY - pmouseY) * -vscale;<br>  fluid.addDensity (px, py, radius, <span class="hljs-number">0.25f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.1f</span>, <span class="hljs-number">1.0f</span>);<br>  fluid.addVelocity(px, py, radius, vx, vy);<br>  particles.spawn(fluid, px, py, radius*<span class="hljs-number">2</span>, <span class="hljs-number">300</span>);<br>&#125;<br><br><span class="hljs-comment">// add impulse: density + temperature, particles</span><br><span class="hljs-keyword">if</span>(mouse_input &amp;&amp; mouseButton == CENTER)&#123;<br>  radius = <span class="hljs-number">15</span>;<br>  vscale = <span class="hljs-number">15</span>;<br>  px     = mouseX;<br>  py     = height-mouseY;<br>  temperature = <span class="hljs-number">2f</span>;<br>  fluid.addDensity(px, py, radius, <span class="hljs-number">0.25f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.1f</span>, <span class="hljs-number">1.0f</span>);<br>  fluid.addTemperature(px, py, radius, temperature);<br>  particles.spawn(fluid, px, py, radius, <span class="hljs-number">100</span>);<br>&#125;<br><br><span class="hljs-comment">// particles</span><br><span class="hljs-keyword">if</span>(mouse_input &amp;&amp; mouseButton == RIGHT)&#123;<br>  px     = mouseX;<br>  py     = height - <span class="hljs-number">1</span> - mouseY; <span class="hljs-comment">// invert</span><br>  radius = <span class="hljs-number">50</span>;<br>  particles.spawn(fluid, px, py, radius, <span class="hljs-number">300</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023zjude-10-36/img/processing3/4.png"><br><img src="/2023zjude-10-36/img/processing3/5.png"><br><img src="/2023zjude-10-36/img/processing3/6.png"></p><p>Test Kinect data.<br><img src="/2023zjude-10-36/img/processing3/7.png"><br>Implement hand interaction by reading Kinect skeletal data to obtain hand information and status.</p><p>Spread hand to disturb particles.</p><p>Close hand to generate particles.</p><p>The code of interaction design is as follows.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">switch</span>(hstate)&#123;<br>  <span class="hljs-keyword">case</span> KinectPV2.HandState_Closed :<br>    fluid.addDensity(tempX, tempY, radius, <span class="hljs-number">0.2f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">1.0f</span>);<br>    fluid.addTemperature(tempX, tempY, radius, temperature);<br>    particles.spawn(fluid, tempX, tempY, radius, <span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> KinectPV2.HandState_Open :<br>    radius = <span class="hljs-number">15</span>;<br>    vscale = <span class="hljs-number">15</span>;<br>    vx     = +<span class="hljs-number">3</span>*vscale;<br>    vy     = -<span class="hljs-number">3</span>*vscale;<br>    px     = tempX;<br>    py     = tempY;<br>    fluid.addDensity (px, py, radius, <span class="hljs-number">0.25f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.1f</span>, <span class="hljs-number">1.0f</span>);<br>    fluid.addVelocity(px, py, radius, vx, vy);<br>    particles.spawn(fluid, px, py, radius*<span class="hljs-number">2</span>, <span class="hljs-number">300</span>);<br>  <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023zjude-10-36/img/processing3/8.png"></p><h1 id="V-Experiment-Experience"><a href="#V-Experiment-Experience" class="headerlink" title="V. Experiment Experience"></a>V. Experiment Experience</h1><p>This experiment utilized Processing to implement Kinect human-computer interaction, designed a refined UI, and used particle effects to detect human hand gestures. The corresponding particle effects can be changed. However, there is room for improvement, as more functions and designs can be developed. I hope to continuously perfect this in my subsequent studies.</p><h1 id="VI-Experiment-Code"><a href="#VI-Experiment-Code" class="headerlink" title="VI. Experiment Code"></a>VI. Experiment Code</h1><p>Fluid CustomParticles:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> com.thomasdiewald.pixelflow.java.DwPixelFlow;<br><span class="hljs-keyword">import</span> com.thomasdiewald.pixelflow.java.fluid.DwFluid2D;<br><br><span class="hljs-keyword">import</span> controlP5.Accordion;<br><span class="hljs-keyword">import</span> controlP5.ControlP5;<br><span class="hljs-keyword">import</span> controlP5.Group;<br><span class="hljs-keyword">import</span> controlP5.RadioButton;<br><span class="hljs-keyword">import</span> controlP5.Toggle;<br><span class="hljs-keyword">import</span> processing.core.*;<br><span class="hljs-keyword">import</span> processing.opengl.PGraphics2D;<br><span class="hljs-keyword">import</span> processing.opengl.PJOGL;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> KinectPV2.KJoint;<br><span class="hljs-keyword">import</span> KinectPV2.*;<br><br>KinectPV2 kinect;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFluidData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DwFluid2D</span>.FluidData&#123;<br>  <br>  <span class="hljs-comment">// update() is called during the fluid-simulation update step.</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(DwFluid2D fluid)</span> &#123;<br>    <span class="hljs-type">float</span> tempX,tempY,tempX2,tempY2,px, py, vx, vy, radius, vscale, temperature;<br>    <span class="hljs-type">int</span> hstate;<br>    <span class="hljs-type">int</span> hstate2;<br>    radius = <span class="hljs-number">15</span>;<br>    vscale = <span class="hljs-number">10</span>;<br>    px    = width/<span class="hljs-number">2</span>;<br>    tempX = width/<span class="hljs-number">2</span>; <br>    tempX2 = width/<span class="hljs-number">2</span>; <br>    py     = <span class="hljs-number">50</span>;<br>    tempY  = <span class="hljs-number">50</span>; <br>    tempY2  = <span class="hljs-number">50</span>;<br>    vx     = <span class="hljs-number">1</span> * +vscale;<br>    vy     = <span class="hljs-number">1</span> *  vscale;<br>    radius = <span class="hljs-number">40</span>;<br>    temperature = <span class="hljs-number">1f</span>;<br>    hstate = KinectPV2.HandState_NotTracked;<br>    hstate2 = KinectPV2.HandState_NotTracked;<br><br>    ArrayList&lt;KSkeleton&gt; skeletonArray =  kinect.getSkeletonDepthMap();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; skeletonArray.size(); i++) <br>    &#123;<br>      <span class="hljs-type">KSkeleton</span> <span class="hljs-variable">skeleton</span> <span class="hljs-operator">=</span> (KSkeleton) skeletonArray.get(i);<br>      <span class="hljs-comment">//if the skeleton is being tracked compute the skleton joints</span><br>      <span class="hljs-keyword">if</span> (skeleton.isTracked()) &#123;<br>        KJoint[] joints = skeleton.getJoints();<br>        <span class="hljs-type">KJoint</span> <span class="hljs-variable">RightHand</span> <span class="hljs-operator">=</span> joints[KinectPV2.JointType_HandRight];<br>        <span class="hljs-type">KJoint</span> <span class="hljs-variable">LeftHand</span> <span class="hljs-operator">=</span> joints[KinectPV2.JointType_HandLeft];<br>        tempX = RightHand.getX();<br>        tempY = height - RightHand.getY();<br>        hstate = RightHand.getState();<br><br>        tempX2 = LeftHand.getX();<br>        tempY2 = height - LeftHand.getY();<br>        hstate2 = LeftHand.getState();<br>      &#125;<br>    &#125;<br><br><br>    fluid.addDensity(px, py, radius, <span class="hljs-number">0.2f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">1.0f</span>);<br>    fluid.addTemperature(px, py, radius, temperature);<br>    particles.spawn(fluid, px, py, radius, <span class="hljs-number">100</span>);<br>    <br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">mouse_input</span> <span class="hljs-operator">=</span> !cp5.isMouseOver() &amp;&amp; mousePressed;<br>    <span class="hljs-keyword">switch</span>(hstate2)&#123;<br>      <span class="hljs-keyword">case</span> KinectPV2.HandState_Closed :<br>        fluid.addDensity(tempX2, tempY2, radius, <span class="hljs-number">0.2f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">1.0f</span>);<br>        fluid.addTemperature(tempX2, tempY2, radius, temperature);<br>        particles.spawn(fluid, tempX2, tempY2, radius, <span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> KinectPV2.HandState_Open :<br>        radius = <span class="hljs-number">15</span>;<br>        vscale = <span class="hljs-number">15</span>;<br>        vx     = +<span class="hljs-number">3</span>*vscale;<br>        vy     = -<span class="hljs-number">3</span>*vscale;<br>        px     = tempX2;<br>        py     = tempY2;<br>        fluid.addDensity (px, py, radius, <span class="hljs-number">0.25f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.1f</span>, <span class="hljs-number">1.0f</span>);<br>        fluid.addVelocity(px, py, radius, vx, vy);<br>        particles.spawn(fluid, px, py, radius*<span class="hljs-number">2</span>, <span class="hljs-number">300</span>);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span>(hstate)&#123;<br>      <span class="hljs-keyword">case</span> KinectPV2.HandState_Closed :<br>        fluid.addDensity(tempX, tempY, radius, <span class="hljs-number">0.2f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">1.0f</span>);<br>        fluid.addTemperature(tempX, tempY, radius, temperature);<br>        particles.spawn(fluid, tempX, tempY, radius, <span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> KinectPV2.HandState_Open :<br>        radius = <span class="hljs-number">15</span>;<br>        vscale = <span class="hljs-number">15</span>;<br>        vx     = +<span class="hljs-number">3</span>*vscale;<br>        vy     = -<span class="hljs-number">3</span>*vscale;<br>        px     = tempX;<br>        py     = tempY;<br>        fluid.addDensity (px, py, radius, <span class="hljs-number">0.25f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.1f</span>, <span class="hljs-number">1.0f</span>);<br>        fluid.addVelocity(px, py, radius, vx, vy);<br>        particles.spawn(fluid, px, py, radius*<span class="hljs-number">2</span>, <span class="hljs-number">300</span>);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(mouse_input &amp;&amp; mouseButton == LEFT)&#123;<br>      radius = <span class="hljs-number">15</span>;<br>      vscale = <span class="hljs-number">15</span>;<br>      px     = mouseX;<br>      py     = height-mouseY;<br>      vx     = (mouseX - pmouseX) * +vscale;<br>      vy     = (mouseY - pmouseY) * -vscale;<br><br><br><br>      fluid.addDensity (px, py, radius, <span class="hljs-number">0.25f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.1f</span>, <span class="hljs-number">1.0f</span>);<br>      fluid.addVelocity(px, py, radius, vx, vy);<br>      particles.spawn(fluid, px, py, radius*<span class="hljs-number">2</span>, <span class="hljs-number">300</span>);<br>    &#125;    <br>    <br>    <span class="hljs-comment">// add impulse: density + velocity, particles</span><br>    <span class="hljs-keyword">if</span>(mouse_input &amp;&amp; mouseButton == LEFT)&#123;<br>      radius = <span class="hljs-number">15</span>;<br>      vscale = <span class="hljs-number">15</span>;<br>      px     = mouseX;<br>      py     = height-mouseY;<br>      vx     = (mouseX - pmouseX) * +vscale;<br>      vy     = (mouseY - pmouseY) * -vscale;<br>      fluid.addDensity (px, py, radius, <span class="hljs-number">0.25f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.1f</span>, <span class="hljs-number">1.0f</span>);<br>      fluid.addVelocity(px, py, radius, vx, vy);<br>      particles.spawn(fluid, px, py, radius*<span class="hljs-number">2</span>, <span class="hljs-number">300</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// add impulse: density + temperature, particles</span><br>    <span class="hljs-keyword">if</span>(mouse_input &amp;&amp; mouseButton == CENTER)&#123;<br>      radius = <span class="hljs-number">15</span>;<br>      vscale = <span class="hljs-number">15</span>;<br>      px     = mouseX;<br>      py     = height-mouseY;<br>      temperature = <span class="hljs-number">2f</span>;<br>      fluid.addDensity(px, py, radius, <span class="hljs-number">0.25f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.1f</span>, <span class="hljs-number">1.0f</span>);<br>      fluid.addTemperature(px, py, radius, temperature);<br>      particles.spawn(fluid, px, py, radius, <span class="hljs-number">100</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// particles</span><br>    <span class="hljs-keyword">if</span>(mouse_input &amp;&amp; mouseButton == RIGHT)&#123;<br>      px     = mouseX;<br>      py     = height - <span class="hljs-number">1</span> - mouseY; <span class="hljs-comment">// invert</span><br>      radius = <span class="hljs-number">50</span>;<br>      particles.spawn(fluid, px, py, radius, <span class="hljs-number">300</span>);<br>    &#125;<br>      <br>  &#125;<br>&#125;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-variable">viewport_w</span> <span class="hljs-operator">=</span> <span class="hljs-number">512</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">viewport_h</span> <span class="hljs-operator">=</span> <span class="hljs-number">424</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">viewport_x</span> <span class="hljs-operator">=</span> <span class="hljs-number">230</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">viewport_y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">gui_w</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">gui_x</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">gui_y</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>KJoint[] joints;<br><span class="hljs-type">int</span> <span class="hljs-variable">fluidgrid_scale</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><br>DwFluid2D fluid;<br><br><span class="hljs-comment">// render targets</span><br>PGraphics2D pg_fluid;<br><span class="hljs-comment">//texture-buffer, for adding obstacles</span><br>PGraphics2D pg_obstacles;<br><br><span class="hljs-comment">// custom particle system</span><br>MyParticleSystem particles;<br><br><span class="hljs-comment">// some state variables for the GUI/display</span><br><span class="hljs-type">int</span>     <span class="hljs-variable">BACKGROUND_COLOR</span>           <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">UPDATE_FLUID</span>               <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">DISPLAY_FLUID_TEXTURES</span>     <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">DISPLAY_FLUID_VECTORS</span>      <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">int</span>     <span class="hljs-variable">DISPLAY_fluid_texture_mode</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">DISPLAY_PARTICLES</span>          <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">settings</span><span class="hljs-params">()</span> &#123;<br>  size(viewport_w, viewport_h, P2D);<br>  smooth(<span class="hljs-number">4</span>);<br>  PJOGL.profile = <span class="hljs-number">3</span>;<br>  <br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  <br>  kinect = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KinectPV2</span>(<span class="hljs-built_in">this</span>);<br>  kinect.enableDepthMaskImg(<span class="hljs-literal">true</span>);<br>  kinect.enableSkeletonDepthMap(<span class="hljs-literal">true</span>);<br>  kinect.init();<br> <br>  surface.setLocation(viewport_x, viewport_y);<br>  <br>  <span class="hljs-comment">// main library context</span><br>  <span class="hljs-type">DwPixelFlow</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DwPixelFlow</span>(<span class="hljs-built_in">this</span>);<br>  context.print();<br>  context.printGL();<br><br>  <span class="hljs-comment">// fluid simulation</span><br>  fluid = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DwFluid2D</span>(context, viewport_w, viewport_h, fluidgrid_scale);<br><br>  <span class="hljs-comment">// set some simulation parameters</span><br>  fluid.param.dissipation_density     = <span class="hljs-number">0.999f</span>;<br>  fluid.param.dissipation_velocity    = <span class="hljs-number">0.99f</span>;<br>  fluid.param.dissipation_temperature = <span class="hljs-number">0.80f</span>;<br>  fluid.param.vorticity               = <span class="hljs-number">0.10f</span>;<br>  <br>  <span class="hljs-comment">// interface for adding data to the fluid simulation</span><br>  <span class="hljs-type">MyFluidData</span> <span class="hljs-variable">cb_fluid_data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFluidData</span>();<br>  fluid.addCallback_FluiData(cb_fluid_data);<br>  <br>  <span class="hljs-comment">// pgraphics for fluid</span><br>  pg_fluid = (PGraphics2D) createGraphics(viewport_w, viewport_h, P2D);<br>  pg_fluid.smooth(<span class="hljs-number">4</span>);<br>  pg_fluid.beginDraw();<br>  pg_fluid.background(BACKGROUND_COLOR);<br>  pg_fluid.endDraw();<br>  <br>      <span class="hljs-comment">// pgraphics for obstacles</span><br>  pg_obstacles = (PGraphics2D) createGraphics(viewport_w, viewport_h, P2D);<br>  pg_obstacles.smooth(<span class="hljs-number">4</span>);<br>  pg_obstacles.beginDraw();<br>  pg_obstacles.clear();<br>  <span class="hljs-type">float</span> radius;<br>  radius = <span class="hljs-number">200</span>;<br>  pg_obstacles.stroke(<span class="hljs-number">64</span>);<br>  pg_obstacles.strokeWeight(<span class="hljs-number">10</span>);<br>  pg_obstacles.noFill();<br>  pg_obstacles.rect(<span class="hljs-number">1</span>*width/<span class="hljs-number">2f</span>,  <span class="hljs-number">1</span>*height/<span class="hljs-number">4f</span>, radius, radius, <span class="hljs-number">20</span>);<br>  <span class="hljs-comment">// border-obstacle</span><br>  pg_obstacles.strokeWeight(<span class="hljs-number">20</span>);<br>  pg_obstacles.stroke(<span class="hljs-number">64</span>);<br>  pg_obstacles.noFill();<br>  pg_obstacles.rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, pg_obstacles.width, pg_obstacles.height);<br>  pg_obstacles.endDraw();<br>  <br>  fluid.addObstacles(pg_obstacles);<br>  <br>  <span class="hljs-comment">// custom particle object</span><br>  particles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyParticleSystem</span>(context, <span class="hljs-number">1000</span> * <span class="hljs-number">1000</span>);<br><br>  createGUI();<br>  <br>  background(<span class="hljs-number">0</span>);<br>  frameRate(<span class="hljs-number">60</span>);<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;    <br>  <span class="hljs-comment">// update simulation</span><br>  <span class="hljs-keyword">if</span>(UPDATE_FLUID)&#123;<br>    fluid.addObstacles(pg_obstacles);<br>    fluid.update();<br>    particles.update(fluid);<br>  &#125;<br>  <br>  <span class="hljs-comment">// clear render target</span><br>  pg_fluid.beginDraw();<br>  pg_fluid.background(BACKGROUND_COLOR);<br>  pg_fluid.endDraw();<br>  <br>  image(kinect.getDepthMaskImage(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br><br>  <span class="hljs-comment">// render fluid stuff</span><br>  <span class="hljs-keyword">if</span>(DISPLAY_FLUID_TEXTURES)&#123;<br>    <span class="hljs-comment">// render: density (0), temperature (1), pressure (2), velocity (3)</span><br>    fluid.renderFluidTextures(pg_fluid, DISPLAY_fluid_texture_mode);<br>  &#125;<br>  <br>  <span class="hljs-keyword">if</span>(DISPLAY_FLUID_VECTORS)&#123;<br>    <span class="hljs-comment">// render: velocity vector field</span><br>    fluid.renderFluidVectors(pg_fluid, <span class="hljs-number">10</span>);<br>  &#125;<br>  <br>  <span class="hljs-keyword">if</span>( DISPLAY_PARTICLES)&#123;<br>    <span class="hljs-comment">// render: particles; 0 ... points, 1 ...sprite texture, 2 ... dynamic points</span><br>    particles.render(pg_fluid, BACKGROUND_COLOR);<br>  &#125;<br>  <br><br>  <span class="hljs-comment">// display</span><br>  image(pg_fluid    , <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  image(pg_obstacles, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <br>&#125;<br><br><br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fluid_resizeUp</span><span class="hljs-params">()</span>&#123;<br>  fluid.resize(width, height, fluidgrid_scale = max(<span class="hljs-number">1</span>, --fluidgrid_scale));<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fluid_resizeDown</span><span class="hljs-params">()</span>&#123;<br>  fluid.resize(width, height, ++fluidgrid_scale);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fluid_reset</span><span class="hljs-params">()</span>&#123;<br>  fluid.reset();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fluid_togglePause</span><span class="hljs-params">()</span>&#123;<br>  UPDATE_FLUID = !UPDATE_FLUID;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fluid_displayMode</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>  DISPLAY_fluid_texture_mode = val;<br>  DISPLAY_FLUID_TEXTURES = DISPLAY_fluid_texture_mode != -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fluid_displayVelocityVectors</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>  DISPLAY_FLUID_VECTORS = val != -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fluid_displayParticles</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>  DISPLAY_PARTICLES = val != -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-keyword">if</span>(key == <span class="hljs-string">&#x27;p&#x27;</span>) fluid_togglePause(); <span class="hljs-comment">// pause / unpause simulation</span><br>  <span class="hljs-keyword">if</span>(key == <span class="hljs-string">&#x27;+&#x27;</span>) fluid_resizeUp();    <span class="hljs-comment">// increase fluid-grid resolution</span><br>  <span class="hljs-keyword">if</span>(key == <span class="hljs-string">&#x27;-&#x27;</span>) fluid_resizeDown();  <span class="hljs-comment">// decrease fluid-grid resolution</span><br>  <span class="hljs-keyword">if</span>(key == <span class="hljs-string">&#x27;r&#x27;</span>) fluid_reset();       <span class="hljs-comment">// restart simulation</span><br>  <br>  <span class="hljs-keyword">if</span>(key == <span class="hljs-string">&#x27;1&#x27;</span>) DISPLAY_fluid_texture_mode = <span class="hljs-number">0</span>; <span class="hljs-comment">// density</span><br>  <span class="hljs-keyword">if</span>(key == <span class="hljs-string">&#x27;2&#x27;</span>) DISPLAY_fluid_texture_mode = <span class="hljs-number">1</span>; <span class="hljs-comment">// temperature</span><br>  <span class="hljs-keyword">if</span>(key == <span class="hljs-string">&#x27;3&#x27;</span>) DISPLAY_fluid_texture_mode = <span class="hljs-number">2</span>; <span class="hljs-comment">// pressure</span><br>  <span class="hljs-keyword">if</span>(key == <span class="hljs-string">&#x27;4&#x27;</span>) DISPLAY_fluid_texture_mode = <span class="hljs-number">3</span>; <span class="hljs-comment">// velocity</span><br>  <br>  <span class="hljs-keyword">if</span>(key == <span class="hljs-string">&#x27;q&#x27;</span>) DISPLAY_FLUID_TEXTURES = !DISPLAY_FLUID_TEXTURES;<br>  <span class="hljs-keyword">if</span>(key == <span class="hljs-string">&#x27;w&#x27;</span>) DISPLAY_FLUID_VECTORS  = !DISPLAY_FLUID_VECTORS;<br>&#125;<br><br><br><span class="hljs-comment">//draw the body</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">drawBody</span><span class="hljs-params">(KJoint[] joints)</span> &#123;<br>  drawBone(joints, KinectPV2.JointType_Head, KinectPV2.JointType_Neck);<br>  drawBone(joints, KinectPV2.JointType_Neck, KinectPV2.JointType_SpineShoulder);<br>  drawBone(joints, KinectPV2.JointType_SpineShoulder, KinectPV2.JointType_SpineMid);<br>  drawBone(joints, KinectPV2.JointType_SpineMid, KinectPV2.JointType_SpineBase);<br>  drawBone(joints, KinectPV2.JointType_SpineShoulder, KinectPV2.JointType_ShoulderRight);<br>  drawBone(joints, KinectPV2.JointType_SpineShoulder, KinectPV2.JointType_ShoulderLeft);<br>  drawBone(joints, KinectPV2.JointType_SpineBase, KinectPV2.JointType_HipRight);<br>  drawBone(joints, KinectPV2.JointType_SpineBase, KinectPV2.JointType_HipLeft);<br><br>  <span class="hljs-comment">// Right Arm</span><br>  drawBone(joints, KinectPV2.JointType_ShoulderRight, KinectPV2.JointType_ElbowRight);<br>  drawBone(joints, KinectPV2.JointType_ElbowRight, KinectPV2.JointType_WristRight);<br>  drawBone(joints, KinectPV2.JointType_WristRight, KinectPV2.JointType_HandRight);<br>  drawBone(joints, KinectPV2.JointType_HandRight, KinectPV2.JointType_HandTipRight);<br>  drawBone(joints, KinectPV2.JointType_WristRight, KinectPV2.JointType_ThumbRight);<br><br>  <span class="hljs-comment">// Left Arm</span><br>  drawBone(joints, KinectPV2.JointType_ShoulderLeft, KinectPV2.JointType_ElbowLeft);<br>  drawBone(joints, KinectPV2.JointType_ElbowLeft, KinectPV2.JointType_WristLeft);<br>  drawBone(joints, KinectPV2.JointType_WristLeft, KinectPV2.JointType_HandLeft);<br>  drawBone(joints, KinectPV2.JointType_HandLeft, KinectPV2.JointType_HandTipLeft);<br>  drawBone(joints, KinectPV2.JointType_WristLeft, KinectPV2.JointType_ThumbLeft);<br><br>  <span class="hljs-comment">// Right Leg</span><br>  drawBone(joints, KinectPV2.JointType_HipRight, KinectPV2.JointType_KneeRight);<br>  drawBone(joints, KinectPV2.JointType_KneeRight, KinectPV2.JointType_AnkleRight);<br>  drawBone(joints, KinectPV2.JointType_AnkleRight, KinectPV2.JointType_FootRight);<br><br>  <span class="hljs-comment">// Left Leg</span><br>  drawBone(joints, KinectPV2.JointType_HipLeft, KinectPV2.JointType_KneeLeft);<br>  drawBone(joints, KinectPV2.JointType_KneeLeft, KinectPV2.JointType_AnkleLeft);<br>  drawBone(joints, KinectPV2.JointType_AnkleLeft, KinectPV2.JointType_FootLeft);<br><br>  <span class="hljs-comment">//Single joints</span><br>  drawJoint(joints, KinectPV2.JointType_HandTipLeft);<br>  drawJoint(joints, KinectPV2.JointType_HandTipRight);<br>  drawJoint(joints, KinectPV2.JointType_FootLeft);<br>  drawJoint(joints, KinectPV2.JointType_FootRight);<br><br>  drawJoint(joints, KinectPV2.JointType_ThumbLeft);<br>  drawJoint(joints, KinectPV2.JointType_ThumbRight);<br><br>  drawJoint(joints, KinectPV2.JointType_Head);<br>&#125;<br><br><span class="hljs-comment">//draw a single joint</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">drawJoint</span><span class="hljs-params">(KJoint[] joints, <span class="hljs-type">int</span> jointType)</span> &#123;<br>  pushMatrix();<br>  translate(joints[jointType].getX(), joints[jointType].getY(), joints[jointType].getZ());<br>  ellipse(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>);<br>  popMatrix();<br>&#125;<br><br><span class="hljs-comment">//draw a bone from two joints</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">drawBone</span><span class="hljs-params">(KJoint[] joints, <span class="hljs-type">int</span> jointType1, <span class="hljs-type">int</span> jointType2)</span> &#123;<br>  pushMatrix();<br>  translate(joints[jointType1].getX(), joints[jointType1].getY(), joints[jointType1].getZ());<br>  ellipse(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>);<br>  popMatrix();<br>  line(joints[jointType1].getX(), joints[jointType1].getY(), joints[jointType1].getZ(), joints[jointType2].getX(), joints[jointType2].getY(), joints[jointType2].getZ());<br>&#125;<br><br><span class="hljs-comment">//draw a ellipse depending on the hand state</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">drawHandState</span><span class="hljs-params">(KJoint joint)</span> &#123;<br>  noStroke();<br>  handState(joint.getState());<br>  pushMatrix();<br>  translate(joint.getX(), joint.getY(), joint.getZ());<br>  println(joint.getX(), joint.getY(), joint.getZ());<br>  ellipse(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">70</span>, <span class="hljs-number">70</span>);<br>  popMatrix();<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Different hand state</span><br><span class="hljs-comment"> KinectPV2.HandState_Open</span><br><span class="hljs-comment"> KinectPV2.HandState_Closed</span><br><span class="hljs-comment"> KinectPV2.HandState_Lasso</span><br><span class="hljs-comment"> KinectPV2.HandState_NotTracked</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//Depending on the hand state change the color</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">handState</span><span class="hljs-params">(<span class="hljs-type">int</span> handState)</span> &#123;<br>  <span class="hljs-keyword">switch</span>(handState) &#123;<br>  <span class="hljs-keyword">case</span> KinectPV2.HandState_Open:<br>    fill(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> KinectPV2.HandState_Closed:<br>    fill(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> KinectPV2.HandState_Lasso:<br>    fill(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> KinectPV2.HandState_NotTracked:<br>    fill(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">break</span>;<br>  &#125;<br>&#125;<br><br><br><br>ControlP5 cp5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createGUI</span><span class="hljs-params">()</span>&#123;<br>  cp5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ControlP5</span>(<span class="hljs-built_in">this</span>);<br>  <br>  <span class="hljs-type">int</span> sx, sy, px, py, oy;<br>  <br>  sx = <span class="hljs-number">100</span>; sy = <span class="hljs-number">14</span>; oy = (<span class="hljs-type">int</span>)(sy*<span class="hljs-number">1.5f</span>);<br>  <br><br>  <span class="hljs-comment">////////////////////////////////////////////////////////////////////////////</span><br>  <span class="hljs-comment">// GUI - FLUID</span><br>  <span class="hljs-comment">////////////////////////////////////////////////////////////////////////////</span><br>  <span class="hljs-type">Group</span> <span class="hljs-variable">group_fluid</span> <span class="hljs-operator">=</span> cp5.addGroup(<span class="hljs-string">&quot;fluid&quot;</span>);<br>  &#123;<br>    group_fluid.setHeight(<span class="hljs-number">20</span>).setSize(gui_w, <span class="hljs-number">300</span>)<br>    .setBackgroundColor(color(<span class="hljs-number">16</span>, <span class="hljs-number">180</span>)).setColorBackground(color(<span class="hljs-number">16</span>, <span class="hljs-number">180</span>));<br>    group_fluid.getCaptionLabel().align(CENTER, CENTER);<br>    <br>    px = <span class="hljs-number">10</span>; py = <span class="hljs-number">15</span>;<br>    <br>    cp5.addButton(<span class="hljs-string">&quot;reset&quot;</span>).setGroup(group_fluid).plugTo(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;fluid_reset&quot;</span>     ).setSize(<span class="hljs-number">80</span>, <span class="hljs-number">18</span>).setPosition(px    , py);<br>    cp5.addButton(<span class="hljs-string">&quot;+&quot;</span>    ).setGroup(group_fluid).plugTo(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;fluid_resizeUp&quot;</span>  ).setSize(<span class="hljs-number">39</span>, <span class="hljs-number">18</span>).setPosition(px+=<span class="hljs-number">82</span>, py);<br>    cp5.addButton(<span class="hljs-string">&quot;-&quot;</span>    ).setGroup(group_fluid).plugTo(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;fluid_resizeDown&quot;</span>).setSize(<span class="hljs-number">39</span>, <span class="hljs-number">18</span>).setPosition(px+=<span class="hljs-number">41</span>, py);<br>    <br>    px = <span class="hljs-number">10</span>;<br>    <br>    cp5.addSlider(<span class="hljs-string">&quot;velocity&quot;</span>).setGroup(group_fluid).setSize(sx, sy).setPosition(px, py+=(<span class="hljs-type">int</span>)(oy*<span class="hljs-number">1.5f</span>))<br>        .setRange(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).setValue(fluid.param.dissipation_velocity).plugTo(fluid.param, <span class="hljs-string">&quot;dissipation_velocity&quot;</span>);<br>    <br>    cp5.addSlider(<span class="hljs-string">&quot;density&quot;</span>).setGroup(group_fluid).setSize(sx, sy).setPosition(px, py+=oy)<br>        .setRange(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).setValue(fluid.param.dissipation_density).plugTo(fluid.param, <span class="hljs-string">&quot;dissipation_density&quot;</span>);<br>    <br>    cp5.addSlider(<span class="hljs-string">&quot;temperature&quot;</span>).setGroup(group_fluid).setSize(sx, sy).setPosition(px, py+=oy)<br>        .setRange(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).setValue(fluid.param.dissipation_temperature).plugTo(fluid.param, <span class="hljs-string">&quot;dissipation_temperature&quot;</span>);<br>    <br>    cp5.addSlider(<span class="hljs-string">&quot;vorticity&quot;</span>).setGroup(group_fluid).setSize(sx, sy).setPosition(px, py+=oy)<br>        .setRange(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).setValue(fluid.param.vorticity).plugTo(fluid.param, <span class="hljs-string">&quot;vorticity&quot;</span>);<br>        <br>    cp5.addSlider(<span class="hljs-string">&quot;iterations&quot;</span>).setGroup(group_fluid).setSize(sx, sy).setPosition(px, py+=oy)<br>        .setRange(<span class="hljs-number">0</span>, <span class="hljs-number">80</span>).setValue(fluid.param.num_jacobi_projection).plugTo(fluid.param, <span class="hljs-string">&quot;num_jacobi_projection&quot;</span>);<br>          <br>    cp5.addSlider(<span class="hljs-string">&quot;timestep&quot;</span>).setGroup(group_fluid).setSize(sx, sy).setPosition(px, py+=oy)<br>        .setRange(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).setValue(fluid.param.timestep).plugTo(fluid.param, <span class="hljs-string">&quot;timestep&quot;</span>);<br>        <br>    cp5.addSlider(<span class="hljs-string">&quot;gridscale&quot;</span>).setGroup(group_fluid).setSize(sx, sy).setPosition(px, py+=oy)<br>        .setRange(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>).setValue(fluid.param.gridscale).plugTo(fluid.param, <span class="hljs-string">&quot;gridscale&quot;</span>);<br>    <br>    <span class="hljs-type">RadioButton</span> <span class="hljs-variable">rb_setFluid_DisplayMode</span> <span class="hljs-operator">=</span> cp5.addRadio(<span class="hljs-string">&quot;fluid_displayMode&quot;</span>).setGroup(group_fluid).setSize(<span class="hljs-number">80</span>,<span class="hljs-number">18</span>).setPosition(px, py+=(<span class="hljs-type">int</span>)(oy*<span class="hljs-number">1.5f</span>))<br>        .setSpacingColumn(<span class="hljs-number">2</span>).setSpacingRow(<span class="hljs-number">2</span>).setItemsPerRow(<span class="hljs-number">2</span>)<br>        .addItem(<span class="hljs-string">&quot;Density&quot;</span>    ,<span class="hljs-number">0</span>)<br>        .addItem(<span class="hljs-string">&quot;Temperature&quot;</span>,<span class="hljs-number">1</span>)<br>        .addItem(<span class="hljs-string">&quot;Pressure&quot;</span>   ,<span class="hljs-number">2</span>)<br>        .addItem(<span class="hljs-string">&quot;Velocity&quot;</span>   ,<span class="hljs-number">3</span>)<br>        .activate(DISPLAY_fluid_texture_mode);<br>    <span class="hljs-keyword">for</span>(Toggle toggle : rb_setFluid_DisplayMode.getItems()) toggle.getCaptionLabel().alignX(CENTER);<br>    <br>    cp5.addRadio(<span class="hljs-string">&quot;fluid_displayVelocityVectors&quot;</span>).setGroup(group_fluid).setSize(<span class="hljs-number">18</span>,<span class="hljs-number">18</span>).setPosition(px, py+=(<span class="hljs-type">int</span>)(oy*<span class="hljs-number">2.5f</span>))<br>        .setSpacingColumn(<span class="hljs-number">2</span>).setSpacingRow(<span class="hljs-number">2</span>).setItemsPerRow(<span class="hljs-number">1</span>)<br>        .addItem(<span class="hljs-string">&quot;Velocity Vectors&quot;</span>, <span class="hljs-number">0</span>)<br>        .activate(DISPLAY_FLUID_VECTORS ? <span class="hljs-number">0</span> : <span class="hljs-number">2</span>);<br>  &#125;<br>  <br>  <br>  <span class="hljs-comment">////////////////////////////////////////////////////////////////////////////</span><br>  <span class="hljs-comment">// GUI - DISPLAY</span><br>  <span class="hljs-comment">////////////////////////////////////////////////////////////////////////////</span><br>  <span class="hljs-type">Group</span> <span class="hljs-variable">group_display</span> <span class="hljs-operator">=</span> cp5.addGroup(<span class="hljs-string">&quot;display&quot;</span>);<br>  &#123;<br>    group_display.setHeight(<span class="hljs-number">20</span>).setSize(gui_w, <span class="hljs-number">50</span>)<br>    .setBackgroundColor(color(<span class="hljs-number">16</span>, <span class="hljs-number">180</span>)).setColorBackground(color(<span class="hljs-number">16</span>, <span class="hljs-number">180</span>));<br>    group_display.getCaptionLabel().align(CENTER, CENTER);<br>    <br>    px = <span class="hljs-number">10</span>; py = <span class="hljs-number">15</span>;<br>    <br>    cp5.addSlider(<span class="hljs-string">&quot;BACKGROUND&quot;</span>).setGroup(group_display).setSize(sx,sy).setPosition(px, py)<br>        .setRange(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>).setValue(BACKGROUND_COLOR).plugTo(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;BACKGROUND_COLOR&quot;</span>);<br>    <br>    cp5.addRadio(<span class="hljs-string">&quot;fluid_displayParticles&quot;</span>).setGroup(group_display).setSize(<span class="hljs-number">18</span>,<span class="hljs-number">18</span>).setPosition(px, py+=(<span class="hljs-type">int</span>)(oy*<span class="hljs-number">1.5f</span>))<br>        .setSpacingColumn(<span class="hljs-number">2</span>).setSpacingRow(<span class="hljs-number">2</span>).setItemsPerRow(<span class="hljs-number">1</span>)<br>        .addItem(<span class="hljs-string">&quot;display particles&quot;</span>, <span class="hljs-number">0</span>)<br>        .activate(DISPLAY_PARTICLES ? <span class="hljs-number">0</span> : <span class="hljs-number">2</span>);<br>  &#125;<br>  <br>  <br>  <span class="hljs-comment">////////////////////////////////////////////////////////////////////////////</span><br>  <span class="hljs-comment">// GUI - ACCORDION</span><br>  <span class="hljs-comment">////////////////////////////////////////////////////////////////////////////</span><br>  cp5.addAccordion(<span class="hljs-string">&quot;acc&quot;</span>).setPosition(gui_x, gui_y).setWidth(gui_w).setSize(gui_w, height)<br>    .setCollapseMode(Accordion.MULTI)<br>    .addItem(group_fluid)<br>    .addItem(group_display)<br>    .open(<span class="hljs-number">4</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>MyParticleSystem:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * PixelFlow | Copyright (C) 2016 Thomas Diewald - http://thomasdiewald.com</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * A Processing/Java library for high performance GPU-Computing (GLSL).</span><br><span class="hljs-comment"> * MIT License: https://opensource.org/licenses/MIT</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><br><br><span class="hljs-keyword">import</span> com.jogamp.opengl.GL2ES2;<br><span class="hljs-keyword">import</span> com.thomasdiewald.pixelflow.java.DwPixelFlow;<br><span class="hljs-keyword">import</span> com.thomasdiewald.pixelflow.java.dwgl.DwGLSLProgram;<br><span class="hljs-keyword">import</span> com.thomasdiewald.pixelflow.java.dwgl.DwGLTexture;<br><span class="hljs-keyword">import</span> com.thomasdiewald.pixelflow.java.fluid.DwFluid2D;<br><br><span class="hljs-keyword">import</span> processing.core.PConstants;<br><span class="hljs-keyword">import</span> processing.opengl.PGraphics2D;<br><br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyParticleSystem</span>&#123;<br>  <br>  <span class="hljs-keyword">public</span> DwGLSLProgram shader_particleSpawn;<br>  <span class="hljs-keyword">public</span> DwGLSLProgram shader_particleUpdate;<br>  <span class="hljs-keyword">public</span> DwGLSLProgram shader_particleRender;<br>  <br>  <span class="hljs-keyword">public</span> DwGLTexture.<span class="hljs-type">TexturePingPong</span> <span class="hljs-variable">tex_particles</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DwGLTexture</span>.TexturePingPong();<br>  <br>  DwPixelFlow context;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> particles_x;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> particles_y;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> MAX_PARTICLES;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">ALIVE_LO</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">ALIVE_HI</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">ALIVE_PARTICLES</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <br>  <span class="hljs-comment">// a global factor, to comfortably reduce/increase the number of particles to spawn</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-variable">spwan_scale</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0f</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-variable">point_size</span>  <span class="hljs-operator">=</span> <span class="hljs-number">1.5f</span>;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-type">Param</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Param</span>();<br>  <br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Param</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-variable">dissipation</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.90f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-variable">inertia</span>     <span class="hljs-operator">=</span> <span class="hljs-number">0.20f</span>;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyParticleSystem</span><span class="hljs-params">()</span>&#123;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyParticleSystem</span><span class="hljs-params">(DwPixelFlow context, <span class="hljs-type">int</span> MAX_PARTICLES)</span>&#123;<br>    context.papplet.registerMethod(<span class="hljs-string">&quot;dispose&quot;</span>, <span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">this</span>.resize(context, MAX_PARTICLES);<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispose</span><span class="hljs-params">()</span>&#123;<br>    release();<br>  &#125;<br>  <br>  <span class="hljs-comment">// call this, when the object is not used any longer!</span><br>  <span class="hljs-comment">// OpenGL resources must be released to void memory leaks</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">()</span>&#123;<br>    tex_particles.release();<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">(DwPixelFlow context, <span class="hljs-type">int</span> MAX_PARTICLES_WANTED)</span>&#123;<br>    particles_x = (<span class="hljs-type">int</span>) Math.ceil(Math.sqrt(MAX_PARTICLES_WANTED));<br>    particles_y = particles_x;<br>    resize(context, particles_x, particles_y);<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">(DwPixelFlow context, <span class="hljs-type">int</span> num_particels_x, <span class="hljs-type">int</span> num_particels_y)</span>&#123;<br>    <span class="hljs-built_in">this</span>.context = context;<br>    <br>    context.begin();<br>    <br>    release(); <span class="hljs-comment">// just in case its not the first resize call</span><br>    <br>    MAX_PARTICLES = particles_x * particles_y;<br>    System.out.println(<span class="hljs-string">&quot;ParticelSystem: texture size = &quot;</span>+particles_x+<span class="hljs-string">&quot;/&quot;</span>+particles_y +<span class="hljs-string">&quot; (&quot;</span>+MAX_PARTICLES+<span class="hljs-string">&quot; particles)&quot;</span>);<br>    <br>    <span class="hljs-comment">// create shader</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;data/&quot;</span>;<br>    shader_particleSpawn  = context.createShader(dir + <span class="hljs-string">&quot;particleSpawn.frag&quot;</span>);<br>    shader_particleUpdate = context.createShader(dir + <span class="hljs-string">&quot;particleUpdate.frag&quot;</span>);<br>    shader_particleRender = context.createShader(dir + <span class="hljs-string">&quot;particleRender.glsl&quot;</span>, dir + <span class="hljs-string">&quot;particleRender.glsl&quot;</span>);<br>    shader_particleRender.vert.setDefine(<span class="hljs-string">&quot;SHADER_VERT&quot;</span>, <span class="hljs-number">1</span>);<br>    shader_particleRender.frag.setDefine(<span class="hljs-string">&quot;SHADER_FRAG&quot;</span>, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// allocate texture</span><br>    tex_particles.resize(context, GL2ES2.GL_RGBA32F, particles_x, particles_y, GL2ES2.GL_RGBA, GL2ES2.GL_FLOAT, GL2ES2.GL_NEAREST, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br><br>    context.end(<span class="hljs-string">&quot;ParticleSystem.resize&quot;</span>);<br> <br>    reset();  <span class="hljs-comment">// initialize particles</span><br>  &#125;<br>  <br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reset</span><span class="hljs-params">()</span>&#123;<br><br>    ALIVE_LO = ALIVE_HI = ALIVE_PARTICLES = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// clear to 0 first, just in case</span><br>    tex_particles.src.clear(<span class="hljs-number">0</span>);<br>    tex_particles.dst.clear(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">// additionally:</span><br>    <span class="hljs-comment">// spawning ALL particles at (-1,-1)</span><br>    <span class="hljs-comment">// this &quot;kind of&quot; clears the texture</span><br>    <span class="hljs-comment">// also, in the render-pass, the vertex gets clipped and no fragment is generated</span><br>    <span class="hljs-comment">// --&gt; speeds up everything</span><br>    spawn(<span class="hljs-literal">null</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, particles_x *particles_y);<br>    <br>    ALIVE_LO = ALIVE_HI = ALIVE_PARTICLES = <span class="hljs-number">0</span>;<br>  &#125;<br>  <br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> px_norm normalized x spawn-position [0, 1]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> py_norm normalized y spawn-position [0, 1]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> count</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">spawn</span><span class="hljs-params">(DwFluid2D fluid, <span class="hljs-type">float</span> px, <span class="hljs-type">float</span> py, <span class="hljs-type">float</span> radius, <span class="hljs-type">int</span> count)</span>&#123;<br>    <br>    count = Math.round(count * spwan_scale);<br>    <br>    <span class="hljs-keyword">if</span>(ALIVE_HI == MAX_PARTICLES)&#123;<br>      System.out.println(<span class="hljs-string">&quot;all particles spawned, respawning from 0&quot;</span>);<br>      ALIVE_HI = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">spawn_lo</span> <span class="hljs-operator">=</span> ALIVE_HI; <br>    <span class="hljs-type">int</span> <span class="hljs-variable">spawn_hi</span> <span class="hljs-operator">=</span> Math.min(spawn_lo + count, MAX_PARTICLES); <br>    <span class="hljs-type">float</span> <span class="hljs-variable">noise</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)(Math.random() * Math.PI);<br><br>    context.begin();<br>    context.beginDraw(tex_particles.dst);<br>    shader_particleSpawn.begin();<br>    <span class="hljs-keyword">if</span>(fluid != <span class="hljs-literal">null</span>)&#123;<br>      shader_particleSpawn.uniform2f(<span class="hljs-string">&quot;wh_viewport&quot;</span>, fluid.viewp_w, fluid.viewp_h);<br>    &#125;<br>    shader_particleSpawn.uniform1i(<span class="hljs-string">&quot;spawn_lo&quot;</span>, spawn_lo);<br>    shader_particleSpawn.uniform1i(<span class="hljs-string">&quot;spawn_hi&quot;</span>, spawn_hi);<br>    shader_particleSpawn.uniform2f(<span class="hljs-string">&quot;spawn_origin&quot;</span>, px, py);<br>    shader_particleSpawn.uniform1f(<span class="hljs-string">&quot;spawn_radius&quot;</span>, radius);<br>    shader_particleSpawn.uniform1f(<span class="hljs-string">&quot;noise&quot;</span>, noise);<br>    shader_particleSpawn.uniform2f(<span class="hljs-string">&quot;wh_particles&quot;</span> , particles_x, particles_y);<br>    shader_particleSpawn.uniformTexture(<span class="hljs-string">&quot;tex_particles&quot;</span> , tex_particles.src);<br>    shader_particleSpawn.drawFullScreenQuad();<br>    shader_particleSpawn.end();<br>    context.endDraw();<br>    context.end(<span class="hljs-string">&quot;ParticleSystem.spawn&quot;</span>);<br>    tex_particles.swap();<br>    <br>    ALIVE_HI = spawn_hi;<br>    ALIVE_PARTICLES = Math.max(ALIVE_PARTICLES, ALIVE_HI - ALIVE_LO);<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(DwFluid2D fluid)</span>&#123;<br>    context.begin();<br>    context.beginDraw(tex_particles.dst);<br>    shader_particleUpdate.begin();<br>    shader_particleUpdate.uniform2f     (<span class="hljs-string">&quot;wh_fluid&quot;</span>     , fluid.fluid_w, fluid.fluid_h);<br>    shader_particleUpdate.uniform2f     (<span class="hljs-string">&quot;wh_particles&quot;</span> , particles_x, particles_y);<br>    shader_particleUpdate.uniform1f     (<span class="hljs-string">&quot;timestep&quot;</span>     , fluid.param.timestep);<br>    shader_particleUpdate.uniform1f     (<span class="hljs-string">&quot;rdx&quot;</span>          , <span class="hljs-number">1.0f</span> / fluid.param.gridscale);<br>    shader_particleUpdate.uniform1f     (<span class="hljs-string">&quot;dissipation&quot;</span>  , param.dissipation);<br>    shader_particleUpdate.uniform1f     (<span class="hljs-string">&quot;inertia&quot;</span>      , param.inertia);<br>    shader_particleUpdate.uniformTexture(<span class="hljs-string">&quot;tex_particles&quot;</span>, tex_particles.src);<br>    shader_particleUpdate.uniformTexture(<span class="hljs-string">&quot;tex_velocity&quot;</span> , fluid.tex_velocity.src);<br>    shader_particleUpdate.uniformTexture(<span class="hljs-string">&quot;tex_obstacles&quot;</span>, fluid.tex_obstacleC.src);<br>    shader_particleUpdate.drawFullScreenQuad();<br>    shader_particleUpdate.end();<br>    context.endDraw();<br>    context.end(<span class="hljs-string">&quot;ParticleSystem.update&quot;</span>);<br>    tex_particles.swap();<br>  &#125;<br>  <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(PGraphics2D dst, <span class="hljs-type">int</span> background)</span>&#123;<br>    <span class="hljs-comment">// no need to run the vertex shader for particles that haven&#x27;t spawned yet</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">num_points_to_render</span> <span class="hljs-operator">=</span> ALIVE_PARTICLES;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> dst.width;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> dst.height;<br>    <br>    dst.beginDraw();<br>    dst.blendMode(PConstants.BLEND);<br>    <span class="hljs-keyword">if</span>(background == <span class="hljs-number">0</span>) dst.blendMode(PConstants.ADD); <span class="hljs-comment">// works nicely on black background</span><br>    <br>    context.begin();<br>    shader_particleRender.begin();<br>    shader_particleRender.uniform2f     (<span class="hljs-string">&quot;wh_viewport&quot;</span>, w, h);<br>    shader_particleRender.uniform2i     (<span class="hljs-string">&quot;num_particles&quot;</span>, particles_x, particles_y);<br>    shader_particleRender.uniform1f     (<span class="hljs-string">&quot;point_size&quot;</span>   , point_size);<br>    shader_particleRender.uniformTexture(<span class="hljs-string">&quot;tex_particles&quot;</span>, tex_particles.src);<br>    shader_particleRender.drawFullScreenPoints(num_points_to_render);<br>    shader_particleRender.end();<br>    context.end(<span class="hljs-string">&quot;ParticleSystem.render&quot;</span>);<br><br>    dst.endDraw();<br>  &#125;<br><br>  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Interface application programming</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Processing with Arduino</title>
    <link href="/2023zjude-10-36/2023/12/31/ProWithArduino/"/>
    <url>/2023zjude-10-36/2023/12/31/ProWithArduino/</url>
    
    <content type="html"><![CDATA[<h1 id="Connecting-Processing-with-Arduino-to-Control-RGB-LED"><a href="#Connecting-Processing-with-Arduino-to-Control-RGB-LED" class="headerlink" title="Connecting Processing with Arduino to Control RGB LED"></a>Connecting Processing with Arduino to Control RGB LED</h1><p>In this design, the color ratio of the three blocks - red, green, and blue - will be controlled in Processing. The corresponding color ratios will be input into the RGB LED, causing it to display the corresponding colors.</p><h2 id="Hardware-Usage-and-Connection"><a href="#Hardware-Usage-and-Connection" class="headerlink" title="Hardware Usage and Connection"></a>Hardware Usage and Connection</h2><ol><li>RGB LED</li></ol><p>The RGB LED is composed of red, green, and blue light mixed together. The maximum brightness value for each color is 255. By changing the mixing ratio of the three colors, many different colors can be obtained. Among the four pins of the RGB LED, three pins correspond to the red, green, and blue pins respectively, while the other pin is usually the VCC (Anode) or GND (Cathode) pin. The common cathode RGB LED is used in this experiment.<br><img src="/2023zjude-10-36/img/processing1/RGB%E5%9B%BE%E7%89%87.png"></p><ol start="2"><li>Hardware Connection</li></ol><p>This hardware setup uses an Arduino Uno, an RGB LED, a breadboard, three 220-ohm resistors, and several wires. The circuit diagram is shown below:<br><img src="/2023zjude-10-36/img/processing1/RGB%E7%BA%BF%E8%B7%AF%E8%BF%9E%E6%8E%A5.png"></p><h2 id="Connecting-Processing-with-Arduino"><a href="#Connecting-Processing-with-Arduino" class="headerlink" title="Connecting Processing with Arduino"></a>Connecting Processing with Arduino</h2><ol><li>Relevant Settings in Processing</li></ol><p>Processing can be connected to Arduino to achieve bidirectional communication between the two. In this experiment, we will first draw the red, green, and blue color blocks in Processing, and control the RGB LED to emit the corresponding color light by adjusting the mixing ratio of the three colors. To connect Processing with Arduino, you must choose the correct port in Processing and make a declaration.</p><p>First, determine the port of the connected Arduino board. We are using the “COM5” port here, as shown in the figure:<br><img src="/2023zjude-10-36/img/processing1/%E7%AB%AF%E5%8F%A3%E9%80%89%E6%8B%A9.jpg"><br>The code required for connecting Processing with Arduino is shown below:<br><img src="/2023zjude-10-36/img/processing1/processing%E8%BF%9E%E6%8E%A5.png"></p><ol start="2"><li>Processing Code</li></ol><p>We drew the red, green, and blue color blocks in Processing and by adjusting the proportions of each block, you can see the mixed color in the lower square block. The Processing code is shown below:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs bash">import processing.serial.*;<br>Serial myPort;  // 用于与Arduino通信的串口对象<br>int redDisplay, greenDisplay, blueDisplay;  // 定义R,G,B 3个颜色分量显示的长度变量<br>int red, green, blue;                       // 定义R，G，B三种颜色分量的值的变量<br>void <span class="hljs-function"><span class="hljs-title">setup</span></span>() &#123;<br>  size(700, 500);<br>  <br>  // 与Arduino建立连接<br>  String portName = <span class="hljs-string">&quot;COM5&quot;</span>;<br>  myPort = new Serial(this, portName, 9600);<br>&#125;<br><br>void <span class="hljs-function"><span class="hljs-title">draw</span></span>() &#123;<br>  background(204);<br>  rectMode(CORNER);<br>  noFill();                              // 不填充颜色<br>  strokeWeight(2);                       // 三个进度条的边框厚度为2个像素<br>  stroke(255, 0, 0);                     // 描边颜色为红色<br>  rect(50, 100, 500, 50);                // 绘制红色分量进度条的边框<br>  stroke(0, 255, 0);                     // 描边颜色为绿色<br>  rect(50, 200, 500, 50);                // 绘制绿色分量进度条的边框<br>  stroke(0, 0, 255);                     // 描边颜色为蓝色<br>  rect(50, 300, 500, 50);                // 绘制蓝色分量进度条的边框<br>  fill(red, 0, 0);                       // 填充颜色为当前红色分量的值<br>  rect(50, 100, redDisplay, 50);         // 以当前红色分量的长度画出进度条<br>  fill(0, green, 0);                     // 填充颜色为当前绿色分量的值<br>  rect(50, 200, greenDisplay, 50);       // 以当前绿色分量的长度画出进度条<br>  fill(0, 0, blue);                      // 填充颜色为当前蓝色分量的值<br>  rect(50, 300, blueDisplay, 50);        // 以当前蓝色分量的长度画出进度条<br>  fill(red, green, blue);                // 以当前R,G,B分量合成的颜色值为填充，画出一个矩形<br>  rect(300, 400, 50, 50);<br>&#125;<br><br>void <span class="hljs-function"><span class="hljs-title">mouseClicked</span></span>() &#123;                         // 定义一个鼠标事件<br>  <span class="hljs-keyword">if</span> (mouseX &lt;= 550 &amp;&amp; mouseX &gt;= 50) &#123;<br>    <span class="hljs-keyword">if</span> (mouseY &lt;= 150 &amp;&amp; mouseY &gt;= 100) &#123;      // 当鼠标指针在该范围时，读取mouseX的值，映射到0~255，为红色颜色分量的值<br>      red = (int) map(mouseX, 50, 550, 0, 255);<br>      redDisplay = mouseX - 50;<br>      <br>      // 发送颜色分量值给Arduino<br>      myPort.write(red);    // 发送红色分量值<br>      myPort.write(green);  // 发送绿色分量值<br>      myPort.write(blue);   // 发送蓝色分量值<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mouseY &lt;= 250 &amp;&amp; mouseY &gt;= 200) &#123;<br>      green = (int) map(mouseX, 50, 550, 0, 255);<br>      greenDisplay = mouseX - 50;<br>      <br>      // 发送颜色分量值给Arduino<br>      myPort.write(red);    // 发送红色分量值<br>      myPort.write(green);  // 发送绿色分量值<br>      myPort.write(blue);   // 发送蓝色分量值<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mouseY &lt;= 350 &amp;&amp; mouseY &gt;= 300) &#123;<br>      blue = (int) map(mouseX, 50, 550, 0, 255);<br>      blueDisplay = mouseX - 50;<br>      <br>      // 发送颜色分量值给Arduino<br>      myPort.write(red);    // 发送红色分量值<br>      myPort.write(green);  // 发送绿色分量值<br>      myPort.write(blue);   // 发送蓝色分量值<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Arduino Code</li></ol><p>After connecting Processing with Arduino and connecting the RGB LED to the respective pins, you can adjust the color of the RGB LED. The Arduino code is shown below:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">int redPin = 6;    // 连接到红色LED的引脚<br>int greenPin = 5; // 连接到绿色LED的引脚<br>int bluePin = 3;  // 连接到蓝色LED的引脚<br><br>void <span class="hljs-function"><span class="hljs-title">setup</span></span>() &#123;<br>  pinMode(redPin, OUTPUT);<br>  pinMode(greenPin, OUTPUT);<br>  pinMode(bluePin, OUTPUT);<br>  Serial.begin(9600);  // 初始化串口通信<br>&#125;<br><br>void <span class="hljs-function"><span class="hljs-title">loop</span></span>() &#123;<br>  <span class="hljs-keyword">if</span> (Serial.available() &gt;= 3) &#123;  // 等待接收3个字节的数据<br>    int redValue = Serial.<span class="hljs-built_in">read</span>();    // 读取红色分量值<br>    int greenValue = Serial.<span class="hljs-built_in">read</span>();  // 读取绿色分量值<br>    int blueValue = Serial.<span class="hljs-built_in">read</span>();   // 读取蓝色分量值<br>    <br>    // 控制LED的亮度<br>    analogWrite(redPin, redValue);<br>    analogWrite(greenPin, greenValue);<br>    analogWrite(bluePin, blueValue);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>After compiling the code in both Processing and Arduino, you can click “run” in Processing to start the program, as shown in the figure:<br><img src="/2023zjude-10-36/img/processing1/processing%E8%BF%90%E8%A1%8C.jpg"><br><img src="/2023zjude-10-36/img/processing1/RGB%E5%8A%A8%E5%9B%BE%E5%B0%8F.gif"></p><h2 id="Demonstration"><a href="#Demonstration" class="headerlink" title="Demonstration"></a>Demonstration</h2><p>The following figure shows the actual demonstration of the RGB LED changing its color based on the color ratio adjustment in Processing. By adjusting the corresponding ratio, different colors can be displayed.<br><img src="/2023zjude-10-36/img/processing1/RGB%E7%BA%BF%E8%B7%AF%E8%BF%9E%E6%8E%A5.png"></p><p>Reference article link for this section：</p><p>RGB LED：<a href="https://blog.csdn.net/weixin_41659040/article/details/104854670">https://blog.csdn.net/weixin_41659040/article/details/104854670</a></p>]]></content>
    
    
    <categories>
      
      <category>Interface application programming</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Open Source Projects Related to Final Project</title>
    <link href="/2023zjude-10-36/2023/12/31/arduinoFinal/"/>
    <url>/2023zjude-10-36/2023/12/31/arduinoFinal/</url>
    
    <content type="html"><![CDATA[<h1 id="Final-Project"><a href="#Final-Project" class="headerlink" title="Final Project"></a>Final Project</h1><p>The theme of our group’s final project is focusing on the ocean. After determining the theme, we first conducted searches in related communities such as CSDN and Bilibili, and then we found some projects related to our final project for reference and learning.</p><p>Firstly, after determining the ocean-related theme, we first considered the appearance aspect. We found many designs related to the ocean, and finally chose jellyfish as the main design to showcase the ocean theme. We referred to three related cases for jellyfish design.</p><p>The first case is shown in the figure below. The first jellyfish design is relatively small, which meets our expectations for making the scene by ourselves, but it has relatively high requirements for materials and craftsmanship, and the overall design is slightly monotonous with a small size, which is not suitable for combining with other hardware.<br><img src="/2023zjude-10-36/img/Arduino3/%E6%B0%B4%E6%AF%8D1.png"></p><p>The second case is shown in the figure below. The second case is the design of a large jellyfish lamp. It can be seen that its overall design is beautiful, and the effect is better with the use of lighting. However, its overall large size and additional decorations may cause our design to lose balance in overall presentation, and only let people see this jellyfish.<br><img src="/2023zjude-10-36/img/Arduino3/%E6%B0%B4%E6%AF%8D2.png"></p><p>The third case is shown in the figure below. The overall design of the third case is closest to our expectations. Its best point is that it has a base, so we can place other hardware in the base without affecting the overall aesthetics. However, its theme is different from ours. Therefore, in terms of appearance, we will consider the advantages of this case, reduce the size of the jellyfish, reduce unnecessary decorations, and use a medium-thick base.<br><img src="/2023zjude-10-36/img/Arduino3/%E6%B0%B4%E6%AF%8D3.png"></p><p>After determining the overall appearance, we thought about the use of hardware and the effect we want to present. In the search process, we plan to use the combination of heart rate sensor and light to show our attention to the ocean. Based on such an idea, we found similar cases.</p><p>The first case is shown in the figure below. This case combines the heart rate sensor with the light and servo to achieve the frequency of servo shaking with the same frequency as heartbeat. We plan to use similar design ideas to make the flashing frequency of the light strip in the device the same as the heartbeat.<br><img src="/2023zjude-10-36/img/Arduino3/%E5%BF%83%E6%BD%AE1.png"><br><img src="/2023zjude-10-36/img/Arduino3/%E5%BF%83%E6%BD%AE2.png"></p><p>The second case is shown in the figure below. This case also makes the flashing frequency of the light the same as the heartbeat. However, it concretizes the heart. We plan to refer to this idea to show that our heartbeat is in sync with marine creatures, but we do not plan to use the heart shape directly, but to present it in other ways.<br><img src="/2023zjude-10-36/img/Arduino3/%E5%BF%83%E7%8E%871.png"><br><img src="/2023zjude-10-36/img/Arduino3/%E5%BF%83%E7%8E%872.png"></p><p>Finally, here are the reference cases for our final project：</p><p>1.<a href="https://www.bilibili.com/video/BV1M14y1E71v/?share_source=copy_web&vd_source=b66fb1698e5fdb1325e0b8e8847317b9">https://www.bilibili.com/video/BV1M14y1E71v/?share_source=copy_web&amp;vd_source=b66fb1698e5fdb1325e0b8e8847317b9</a></p><p>2.<a href="https://www.bilibili.com/video/BV16K41167WV/?share_source=copy_web&vd_source=b66fb1698e5fdb1325e0b8e8847317b9">https://www.bilibili.com/video/BV16K41167WV/?share_source=copy_web&amp;vd_source=b66fb1698e5fdb1325e0b8e8847317b9</a></p><p>3.<a href="https://www.bilibili.com/video/BV1Lx4y1G79p/?share_source=copy_web&vd_source=b66fb1698e5fdb1325e0b8e8847317b9">https://www.bilibili.com/video/BV1Lx4y1G79p/?share_source=copy_web&amp;vd_source=b66fb1698e5fdb1325e0b8e8847317b9</a></p><p>4.<a href="https://www.bilibili.com/video/BV1Ef4y1R7kr/?share_source=copy_web&vd_source=b66fb1698e5fdb1325e0b8e8847317b9">https://www.bilibili.com/video/BV1Ef4y1R7kr/?share_source=copy_web&amp;vd_source=b66fb1698e5fdb1325e0b8e8847317b9</a></p><p>5.<a href="https://www.bilibili.com/video/BV1Fy4y187sW/?share_source=copy_web&vd_source=b66fb1698e5fdb1325e0b8e8847317b9">https://www.bilibili.com/video/BV1Fy4y187sW/?share_source=copy_web&amp;vd_source=b66fb1698e5fdb1325e0b8e8847317b9</a></p><p>6.<a href="https://www.bilibili.com/video/BV1q44y1g7ds/?share_source=copy_web&vd_source=b66fb1698e5fdb1325e0b8e8847317b9">https://www.bilibili.com/video/BV1q44y1g7ds/?share_source=copy_web&amp;vd_source=b66fb1698e5fdb1325e0b8e8847317b9</a></p>]]></content>
    
    
    <categories>
      
      <category>Arduino</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ArduinoIO</title>
    <link href="/2023zjude-10-36/2023/12/31/ArduinoIO/"/>
    <url>/2023zjude-10-36/2023/12/31/ArduinoIO/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Potentiometer-Control-Servo-Rotation-Angle"><a href="#1-Potentiometer-Control-Servo-Rotation-Angle" class="headerlink" title="1 Potentiometer Control Servo Rotation Angle"></a>1 Potentiometer Control Servo Rotation Angle</h1><p>This experiment combines a potentiometer with a servo motor, using the potentiometer to control the servo motor. The servo motor rotates to the corresponding angle as the potentiometer knob is turned.</p><h2 id="Hardware-Connection"><a href="#Hardware-Connection" class="headerlink" title="Hardware Connection"></a>Hardware Connection</h2><ol><li>Potentiometer:</li></ol><p>The potentiometer is a non-polar device and a type of variable resistor. It has three terminals, and by rotating the knob, the position of terminal 2 changes, which in turn changes the resistance value. Terminal 1 is connected to the 5V pin of the development board, terminal 3 is connected to the GND pin, and terminal 2 is connected to an analog input pin.</p><p>The connection of the potentiometer’s three terminals is shown below:<br><img src="/2023zjude-10-36/img/Arduino2/%E7%94%B5%E4%BD%8D%E5%99%A8%E5%8E%9F%E7%90%86.png"></p><ol start="2"><li>Servo Motor</li></ol><p>(1) The SG90 servo motor is a position (angle) servo driver, suitable for control systems that require continuous and controllable angle changes. In robot mechatronic control systems, servo motor performance is an important influencing factor. Servo motors can be used as basic output actuators in micro-electromechanical systems (MEMS) and aero modeling, and their simple control and output make it easy to interface with microcontroller systems.<br><img src="/2023zjude-10-36/img/Arduino2/%E8%88%B5%E6%9C%BA.jpg"></p><p>(2) Principle of the Servo Motor: The control signal enters the signal modulation chip from the receiver’s channel, obtaining a DC bias voltage. It has an internal reference circuit that generates a reference signal with a period of 20ms and a width of 1.5ms. The obtained DC bias voltage is compared with the voltage of the potentiometer to obtain the voltage difference output. Finally, the polarity of the voltage difference is output to the motor driver chip to determine the motor’s forward or reverse rotation. When the motor speed is constant, the potentiometer rotates by cascading reduction gears, causing the voltage difference to be zero and the motor to stop rotating. Of course, we don’t need to understand its specific working principle, knowing its control principle is enough. Just like using a transistor, knowing that it can be used as a switch or amplifier, we don’t need to consider how the electrons flow inside the transistor.<br>The servo motor wiring diagram is shown in the following image:<br><img src="/2023zjude-10-36/img/Arduino2/%E8%88%B5%E6%9C%BA%E8%BF%9E%E6%8E%A5%E5%9B%BE.png"></p><h2 id="Hardware-Connection-1"><a href="#Hardware-Connection-1" class="headerlink" title="Hardware Connection"></a>Hardware Connection</h2><p>For this experiment, we used an Arduino Uno, a potentiometer, a servo motor, and several wires. The circuit connection diagram is shown below:<br><img src="/2023zjude-10-36/img/Arduino2/%E8%88%B5%E6%9C%BA%E6%8E%A5%E7%BA%BF%E5%9B%BE.png"><br>The demonstration of this experiment is as follows：<br><img src="/2023zjude-10-36/img/Arduino2/%E8%88%B5%E6%9C%BA%E5%8A%A8%E5%9B%BE.gif"></p><h2 id="Arduino-Code"><a href="#Arduino-Code" class="headerlink" title="Arduino Code"></a>Arduino Code</h2><p>The code for this experiment is as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;Servo.h&gt;           // 声明调用Servo.h库</span><br>Servo myservo;               // 创建一个舵机对象<br> <br>int potpin = 0;              // 连接到模拟口0               <br>int val;                     //变量val用来存储从模拟口0读到的值<br> <br>void <span class="hljs-function"><span class="hljs-title">setup</span></span>() &#123; <br>      myservo.attach(11);          // 将引脚11上的舵机与声明的舵机对象连接起来<br>&#125; <br> <br>void <span class="hljs-function"><span class="hljs-title">loop</span></span>() &#123; <br>       val = analogRead(potpin);         //从模拟口0读值，并通过val记录          <br>       val = map(val, 0, 1023, 0, 179);  //通过map函数进行数值转换    <br>       myservo.write(val);               // 给舵机写入角度  <br>       delay(20);                        // 延时20ms让舵机转到指定位置  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-Displaying-Distance-Data-from-Ultrasonic-Sensor-on-LCD-Screen"><a href="#2-Displaying-Distance-Data-from-Ultrasonic-Sensor-on-LCD-Screen" class="headerlink" title="2 Displaying Distance Data from Ultrasonic Sensor on LCD Screen"></a>2 Displaying Distance Data from Ultrasonic Sensor on LCD Screen</h1><p>This experiment combines an ultrasonic sensor with an LCD screen to measure the distance from the module to obstacles, and display this distance on the LCD screen.</p><h2 id="Hardware-Connection-2"><a href="#Hardware-Connection-2" class="headerlink" title="Hardware Connection"></a>Hardware Connection</h2><ol><li>Ultrasonic Sensor</li></ol><p>(1) The principle of ultrasonic distance measurement is based on the time difference between the transmitter emitting ultrasonic waves and the receiver receiving them, similar to the principle of radar ranging. The ultrasonic transmitter emits ultrasonic waves in a certain direction and starts timing at the moment of emission. The ultrasonic waves propagate through the air and immediately return when they encounter an obstacle. The ultrasonic receiver stops timing when it receives the reflected wave.</p><p>(2) Measurement principle:<br>a. Using a timer, when the echo pin of our ultrasonic module transitions from low to high, we start the timer.<br>b. When the echo pin of our ultrasonic module transitions back to low, it indicates the end, i.e., stop the timer.<br>c. Applying the formula: Distance &#x3D; (Speed (340m&#x2F;s) * Time) &#x2F; 2<br>The ultrasonic sensor pinout is shown in the following image:<br><img src="/2023zjude-10-36/img/Arduino2/%E8%B6%85%E5%A3%B0%E6%B3%A2%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p><ol start="2"><li>LCD Screen</li></ol><p>The LCD screen is one of the simplest devices used to display the output of Arduino projects. There are two different types of LCDs: graphic and character dot matrix LCDs. We will be using a character LCD here. The pinout of the LCD screen is as follows:<br><img src="/2023zjude-10-36/img/Arduino2/LCD%E5%BC%95%E8%84%9A%E8%AF%B4%E6%98%8E.png"></p><ol start="3"><li>For this experiment, we will be using an Arduino Uno, an LCD screen, an ultrasonic sensor, and several wires. The circuit connection diagram is shown below:<br><img src="/2023zjude-10-36/img/Arduino2/LCD%E6%8E%A5%E7%BA%BF%E5%9B%BE.png"><br>The demonstration of this experiment is as follows：<br><img src="/2023zjude-10-36/img/Arduino2/%E6%B5%8B%E8%B7%9D%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg"></li></ol><h2 id="Arduino-Code-1"><a href="#Arduino-Code-1" class="headerlink" title="Arduino Code"></a>Arduino Code</h2><p>The code for this experiment is as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;LiquidCrystal.h&gt;</span><br><span class="hljs-comment">#define Trig 8 </span><br><span class="hljs-comment">#define Echo 9 </span><br><span class="hljs-built_in">float</span> cm; <br><span class="hljs-built_in">float</span> temp;<br>LiquidCrystal lcd(12,11,5,4,3,2);       <br>int val = 0;        <br><br>void <span class="hljs-function"><span class="hljs-title">setup</span></span>()<br>&#123;<br>  lcd.begin(16,2);    <br>  lcd.print(<span class="hljs-string">&quot;Welcome to use!&quot;</span>);   <br>  delay(1000);       <br>  lcd.clear();      <br>  Serial.begin(9600);<br>  pinMode(Trig, OUTPUT);<br>  pinMode(Echo, INPUT);<br>&#125;<br> <br>void <span class="hljs-function"><span class="hljs-title">loop</span></span>()<br>&#123;<br>  digitalWrite(Trig, LOW); <br>  delayMicroseconds(2);    <br>  digitalWrite(Trig,HIGH); <br>  delayMicroseconds(10);    <br>  digitalWrite(Trig, LOW); <br>  temp = <span class="hljs-built_in">float</span>(pulseIn(Echo, HIGH)); <br>  cm = (temp * 17 )/1000; <br>  <br>  lcd.setCursor(0,0);       <br>  lcd.print(<span class="hljs-string">&quot;Now Distance：&quot;</span>); <br>  lcd.setCursor(2,1); <br>  lcd.print(cm);      <br>  lcd.print(<span class="hljs-string">&quot;cm&quot;</span>);  <br>  delay(1000);              <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-Controlling-8x8-Common-Cathode-Red-LED-Matrix-with-Arduino"><a href="#3-Controlling-8x8-Common-Cathode-Red-LED-Matrix-with-Arduino" class="headerlink" title="3 Controlling 8x8 Common Cathode Red LED Matrix with Arduino"></a>3 Controlling 8x8 Common Cathode Red LED Matrix with Arduino</h1><p>In this experiment, an 8x8 common cathode red LED matrix is used. The first part of the experiment involves displaying a small heart shape on the screen using code. The second part displays text and a blinking heart on the screen.</p><h2 id="Hardware-Connection-3"><a href="#Hardware-Connection-3" class="headerlink" title="Hardware Connection"></a>Hardware Connection</h2><ol><li>8x8 Common Cathode Red LED Matrix</li></ol><p>The red LED matrix has a total of 16 pins. These pins represent 8 columns and 8 rows. By specifying which column and row pins have a high or low voltage level, you can control which LEDs are lit up. For example, to light up the top-left LED, you need to set the column pin 13 to a high voltage level and the row pin 9 to a low voltage level. You can use a multimeter to test the circuit continuity and verify the LED lighting.</p><p>The schematic diagram and circuit connection of the components are shown in the following figures:<br><img src="/2023zjude-10-36/img/Arduino2/%E5%85%83%E4%BB%B6%E7%A4%BA%E6%84%8F%E5%9B%BE1.png"><br><img src="/2023zjude-10-36/img/Arduino2/%E5%85%83%E4%BB%B6%E7%A4%BA%E6%84%8F%E5%9B%BE2.png"></p><ol start="2"><li>For this experiment, you will need an Arduino Uno, an 8x8 common cathode red LED matrix, a breadboard, and several jumper wires. The hardware connection is shown in the following figure (the component is not available in Tinkercad):<br><img src="/2023zjude-10-36/img/Arduino2/%E5%AE%9E%E9%99%85%E6%8E%A5%E7%BA%BF.jpg"></li></ol><h2 id="Arduino-Code-2"><a href="#Arduino-Code-2" class="headerlink" title="Arduino Code"></a>Arduino Code</h2><ol><li>The first experiment is to light up a heart on the screen. The actual effect is shown below:</li></ol><p>The code for this experiment is shown below:<br><img src="/2023zjude-10-36/img/Arduino2/%E7%88%B1%E5%BF%83.jpg"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">int col[8] = &#123;7,2,A0,4,12,A1,11,A3&#125;;<br>int row[8] = &#123;3,A5,A4,6,A2,5,1,0&#125;; <br>int appear[8][8] = &#123;&#123;0,0,0,0,0,0,0,0&#125;,//爱心<br>                    &#123;0,1,0,0,0,0,1,0&#125;, <br>                    &#123;1,0,1,0,0,1,0,1&#125;,<br>                    &#123;1,0,0,1,1,0,0,1&#125;,<br>                    &#123;0,1,0,0,0,0,1,0&#125;,<br>                    &#123;0,0,1,0,0,1,0,0&#125;,<br>                    &#123;0,0,0,1,1,0,0,0&#125;,<br>                    &#123;0,0,0,0,0,0,0,0&#125;&#125;;                         <br>void <span class="hljs-function"><span class="hljs-title">setup</span></span>() &#123;<br>  <span class="hljs-keyword">for</span>(int i = 0;i &lt; 8;i++)&#123;<br>    pinMode(row[i],OUTPUT);<br>    pinMode(col[i],OUTPUT);<br>    digitalWrite(row[i],LOW);//把行设为高电压，把列设为低电压，避免接通就亮。<br>    digitalWrite(col[i],HIGH);<br>  &#125;<br>&#125;<br>void <span class="hljs-function"><span class="hljs-title">loop</span></span>() &#123;<br>      draw();<br>&#125;<br><br>void <span class="hljs-function"><span class="hljs-title">draw</span></span>()&#123;<br>  <span class="hljs-keyword">for</span>(int i = 0;i &lt; 8;i++)&#123;<br>    <span class="hljs-keyword">for</span>(int j = 0;j &lt; 8;j++)&#123; <br>      <span class="hljs-keyword">if</span>(appear[i][j] == 1)&#123;//逐行逐列检查是否等于1。<br>        digitalWrite(col[i],LOW);//从数组为1的位置开始点亮<br>        digitalWrite(row[j],HIGH);<br>        delay(1);<br>        digitalWrite(row[j],LOW);//把数组为1后面位置都LED熄灭<br>        digitalWrite(col[i],HIGH);<br>        &#125;<br>      &#125; <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>The second experiment is to display the text “祝大家节日快乐” (Wishing everyone a happy holiday) on the screen, along with a blinking heart. The actual effect is shown below:<br><img src="/2023zjude-10-36/img/Arduino2/%E9%97%AA%E7%83%81%E7%88%B1%E5%BF%83.gif"></li></ol><p>The code for this experiment is shown below:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs bash">int col[8] = &#123;7,2,A0,4,12,A1,11,A3&#125;;<br>int row[8] = &#123;3,A5,A4,6,A2,5,1,0&#125;; <br>unsigned char zhu[8][8] =      //祝  <br>&#123;  <br>  1,0,0,1,1,1,1,1,  <br>  0,1,0,1,0,0,0,1,  <br>  1,1,1,1,1,1,1,1,  <br>  0,1,1,0,1,0,1,0,  <br>  1,1,0,0,1,0,1,0,  <br>  0,1,0,0,1,0,1,0,  <br>  0,1,0,0,1,0,1,0,  <br>  0,1,0,1,0,0,1,1,  <br>&#125;;<br>unsigned char da[8][8] =      //大  <br>&#123;  <br>  0,0,0,1,0,0,0,0,  <br>  0,0,0,1,0,0,0,0,  <br>  1,1,1,1,1,1,1,1,  <br>  0,0,0,1,0,0,0,0,  <br>  0,0,0,1,0,0,0,0,  <br>  0,0,1,0,1,0,0,0,  <br>  0,1,0,0,0,1,0,0,  <br>  1,0,0,0,0,0,1,1,  <br>&#125;;<br>unsigned char jia[8][8] =      //家<br>&#123;  <br>  0,0,0,1,0,0,0,0,  <br>  1,1,1,1,1,1,1,1,  <br>  1,0,1,1,1,1,0,1,  <br>  0,0,1,1,0,0,1,0,  <br>  1,1,1,1,1,1,0,0,  <br>  0,1,1,1,1,0,0,0,  <br>  1,1,0,1,0,1,0,0,  <br>  0,0,1,1,0,0,1,1,  <br>&#125;;<br>unsigned char jie[8][8] =      //节<br>&#123;  <br>  0,0,1,0,0,1,0,0,  <br>  0,1,1,1,1,1,1,0,  <br>  0,0,1,0,0,1,0,0,  <br>  0,0,0,0,0,0,0,0,  <br>  0,1,1,1,1,1,1,0,  <br>  0,0,0,1,0,0,1,0,  <br>  0,0,0,1,0,1,1,0,  <br>  0,0,0,1,0,0,0,0,  <br>&#125;;<br>unsigned char ri[8][8] =      //日<br>&#123;  <br>  0,0,0,0,0,0,0,0,  <br>  0,1,1,1,1,1,1,0,  <br>  0,1,0,0,0,0,1,0,  <br>  0,1,1,1,1,1,1,0,  <br>  0,1,0,0,0,0,1,0,  <br>  0,1,0,0,0,0,1,0,  <br>  0,1,1,1,1,1,1,0,  <br>  0,0,0,0,0,0,0,0,  <br>&#125;;<br>unsigned char kuai[8][8] =      //快  <br>&#123;  <br>  0,1,0,0,1,0,0,0,  <br>  0,1,0,0,1,0,0,0,  <br>  1,1,0,1,1,1,1,0,  <br>  0,1,1,0,1,0,1,0,  <br>  0,1,1,1,1,1,1,1,  <br>  0,1,0,0,1,0,0,0,  <br>  0,1,0,1,0,1,0,0,  <br>  0,1,1,0,0,0,1,1,   <br>&#125;;<br>unsigned char le[8][8] =      //乐  <br>&#123;  <br>  0,0,0,0,0,0,0,1,  <br>  0,1,1,1,1,1,1,0,  <br>  0,1,0,0,1,0,0,0,  <br>  0,1,1,1,1,1,1,1,  <br>  0,0,0,0,1,0,0,0,  <br>  0,0,1,0,1,0,1,0,  <br>  0,1,0,0,1,0,0,1,  <br>  0,0,0,1,1,0,0,0,  <br>&#125;;<br>unsigned char ximie[8][8] =      //全部熄灭<br>&#123;  <br>  0,0,0,0,0,0,0,0,  <br>  0,0,0,0,0,0,0,0,  <br>  0,0,0,0,0,0,0,0,  <br>  0,0,0,0,0,0,0,0,  <br>  0,0,0,0,0,0,0,0,  <br>  0,0,0,0,0,0,0,0,  <br>  0,0,0,0,0,0,0,0,  <br>  0,0,0,0,0,0,0,0,  <br>&#125;;<br><br>unsigned char biglove[8][8] =       //大“心型”的数据  <br>&#123;  <br>  0,0,0,0,0,0,0,0,  <br>  0,1,1,0,0,1,1,0,  <br>  1,1,1,1,1,1,1,1,  <br>  1,1,1,1,1,1,1,1,  <br>  1,1,1,1,1,1,1,1,  <br>  0,1,1,1,1,1,1,0,  <br>  0,0,1,1,1,1,0,0,  <br>  0,0,0,1,1,0,0,0,  <br>&#125;;  <br>  <br>unsigned char smalllove[8][8] =      //小“心型”的数据  <br>&#123;  <br>  0,0,0,0,0,0,0,0,  <br>  0,0,0,0,0,0,0,0,  <br>  0,0,1,0,0,1,0,0,  <br>  0,1,1,1,1,1,1,0,  <br>  0,1,1,1,1,1,1,0,  <br>  0,0,1,1,1,1,0,0,  <br>  0,0,0,1,1,0,0,0,  <br>  0,0,0,0,0,0,0,0,  <br>&#125;;  <br>  <br>void <span class="hljs-function"><span class="hljs-title">setup</span></span>() &#123;<br>  <span class="hljs-keyword">for</span>(int i = 0;i &lt; 8;i++)&#123;<br>    pinMode(row[i],OUTPUT);<br>    pinMode(col[i],OUTPUT);<br>    digitalWrite(row[i],LOW);//把行设为高电压，把列设为低电压，避免接通就亮。<br>    digitalWrite(col[i],HIGH);<br>  &#125;<br><br>&#125;<br><br>void <span class="hljs-function"><span class="hljs-title">Clear</span></span>()&#123;<br>   <span class="hljs-keyword">for</span>(int i = 0;i &lt; 8;i++)&#123;<br>    digitalWrite(row[i],LOW);//把行设为高电压，把列设为低电压，避免接通就亮。<br>    digitalWrite(col[i],HIGH);<br> &#125;<br>&#125;<br>void Display(unsigned char dat[8][8])   //显示函数  <br>&#123;  <br>  <span class="hljs-keyword">for</span>(int c = 0; c&lt;8;c++)  <br>  &#123;  <br>    digitalWrite(col[c],LOW);//选通第行  <br>  <br>    //循环  <br>    <span class="hljs-keyword">for</span>(int r = 0;r&lt;8;r++)  <br>    &#123;  <br>      digitalWrite(row[r],dat[c][r]);  <br>    &#125;  <br>    delay(1);  <br>    Clear();  //清空显示去除余晖  <br>  &#125; <br>&#125; <br>void <span class="hljs-function"><span class="hljs-title">BlessYou</span></span>()<br>&#123;<br>  <span class="hljs-keyword">for</span>(int i = 0 ; i &lt; 50 ; i++)         //循环显示50次  <br>  &#123;     <br>    Display(zhu);                 //显示 祝  <br>  &#125;  <br>  <span class="hljs-keyword">for</span>(int i = 0 ; i &lt; 50 ; i++)         //循环显示50次  <br>  &#123;     <br>    Display(da);                 //显示 大  <br>  &#125;  <br>  <span class="hljs-keyword">for</span>(int i = 0 ; i &lt; 50 ; i++)         //循环显示50次  <br>  &#123;     <br>    Display(jia);                 //显示 家  <br>  &#125;  <br>  <span class="hljs-keyword">for</span>(int i = 0 ; i &lt; 50 ; i++)         //循环显示50次  <br>  &#123;     <br>    Display(jie);                 //显示 节  <br>  &#125;  <br>  <span class="hljs-keyword">for</span>(int i = 0 ; i &lt; 50 ; i++)         //循环显示50次  <br>  &#123;     <br>    Display(ri);                 //显示 日  <br>  &#125;  <br>  <span class="hljs-keyword">for</span>(int i = 0 ; i &lt; 50 ; i++)         //循环显示50次  <br>  &#123;     <br>    Display(kuai);                 //显示 快  <br>  &#125;  <br>  <span class="hljs-keyword">for</span>(int i = 0 ; i &lt; 50 ; i++)         //循环显示50次  <br>  &#123;     <br>    Display(le);                 //显示 乐  <br>  &#125;<br>  <span class="hljs-keyword">for</span>(int i = 0 ; i &lt; 30 ; i++)         //循环显示30次  <br>  &#123;     <br>    Display(biglove);                 //显示 大心<br>  &#125;<br>  <span class="hljs-keyword">for</span>(int i = 0 ; i &lt; 30 ; i++)         //循环显示30次  <br>  &#123;     <br>    Display(smalllove);                 //显示 小心  <br>  &#125;<br>  <span class="hljs-keyword">for</span>(int i = 0 ; i &lt; 30 ; i++)         //循环显示30次  <br>  &#123;     <br>    Display(biglove);                 //显示 大心   <br>  &#125;<br>  <span class="hljs-keyword">for</span>(int i = 0 ; i &lt; 30 ; i++)         //循环显示30次  <br>  &#123;     <br>    Display(smalllove);                 //显示 小心  <br>  &#125;  <br>  <span class="hljs-keyword">for</span>(int i = 0 ; i &lt; 200 ; i++)         //循环显示200次  <br>  &#123;     <br>    Display(ximie);                 //显示 熄灭200次  <br>  &#125; <br>&#125;<br><br>void <span class="hljs-function"><span class="hljs-title">loop</span></span>() &#123;<br>  // put your main code here, to run repeatedly:<br>  BlessYou();<br>&#125;<br></code></pre></td></tr></table></figure><p>Reference article link for this section：</p><p><a href="https://blog.csdn.net/m0_37738838/article/details/121683700">https://blog.csdn.net/m0_37738838/article/details/121683700</a></p>]]></content>
    
    
    <categories>
      
      <category>Arduino</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ArduinoIntro</title>
    <link href="/2023zjude-10-36/2023/12/31/ArduinoIntro/"/>
    <url>/2023zjude-10-36/2023/12/31/ArduinoIntro/</url>
    
    <content type="html"><![CDATA[<h1 id="Arduino-Introduction"><a href="#Arduino-Introduction" class="headerlink" title="Arduino Introduction"></a>Arduino Introduction</h1><h2 id="1-Arduino’s-software-and-hardware"><a href="#1-Arduino’s-software-and-hardware" class="headerlink" title="1 Arduino’s software and hardware"></a>1 Arduino’s software and hardware</h2><p>Arduino is a user-friendly and flexible open-source electronic prototyping platform. It consists of both hardware (various models of Arduino boards) and software (Arduino IDE). It was developed by a European development team in the winter of 2005, including members such as Massimo Banzi, David Cuartielles, Tom Igoe, Gianluca Martino, David Mellis, and Nicholas Zambetti.</p><p>It is built on an open source simple I&#x2F;O interface board and has a programming environment similar to Processing&#x2F;Wiring that uses programming languages such as Java and C. It mainly consists of two parts: the hardware part, which is the Arduino circuit board used for circuit connections, and the other is the Arduino IDE, a program development environment on your computer. You simply write program code in the IDE, upload it to the Arduino circuit board, and the program will tell the Arduino circuit board what to do.</p><p>Arduino can sense the environment through various sensors and control lights, motors, and other devices to provide feedback and influence the environment. The microcontroller on the board can be programmed using the Arduino programming language, which is based on Wiring, and compiled into binary files and burned into the microcontroller. Programming for Arduino is achieved through the Arduino programming language (based on Wiring) and Arduino development environment (based on Processing). Projects based on Arduino can include only Arduino or can also include other software running on a PC, communicating with each other (such as Flash, Processing, MaxMSP).</p><p>Arduino’s software (arduino IDE)：<br><img src="/2023zjude-10-36/img/Arduino1/IDE%E4%BB%8B%E7%BB%8D.png"></p><p>Arduino’s hardware:<br>Arduino’s official community offers a wide range of hardware options, with the commonly used Arduino Uno board and the compact Arduino Nano board suitable for smaller projects. For more types of hardware, please visit the official Arduino community for further information.<br><img src="/2023zjude-10-36/img/Arduino1/UNO.jpg"><br><img src="/2023zjude-10-36/img/Arduino1/nano.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Arduino</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Processing Drawing Application (GUI)</title>
    <link href="/2023zjude-10-36/2023/12/31/processingGUI/"/>
    <url>/2023zjude-10-36/2023/12/31/processingGUI/</url>
    
    <content type="html"><![CDATA[<h1 id="Processing-Drawing-Application-GUI"><a href="#Processing-Drawing-Application-GUI" class="headerlink" title="Processing Drawing Application (GUI)"></a>Processing Drawing Application (GUI)</h1><p>This file describes to create a simple drawing application using Processing. This application includes basic drawing functionalities such as pen color and thickness selection, as well as options to undo and clear the canvas.</p><h2 id="Overview-of-the-Program"><a href="#Overview-of-the-Program" class="headerlink" title="Overview of the Program"></a>Overview of the Program</h2><p>This drawing application uses the <code>controlP5</code> library to create a user interface, including a color wheel, sliders, and buttons. The program allows users to draw on a canvas with the mouse and see their drawing in real-time.</p><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>Enter the processing official website and download the processing application.<br><img src="/2023zjude-10-36/img/processing2/1.png"><br><img src="/2023zjude-10-36/img/processing2/2.png"><br>Download the installation package as shown in the picture, unzip and open the application.<br><img src="/2023zjude-10-36/img/processing2/3.png"><br>The opened application interface is shown in the figure.<br><img src="/2023zjude-10-36/img/processing2/4.png"><br>Before you begin, make sure you have installed the <code>controlP5</code> library in the Processing IDE. You can install the <code>controlP5</code> library via “Java” -&gt; “Manage Modes” -&gt; “Libraries”-&gt; search the controlP5 library and install it.<br><img src="/2023zjude-10-36/img/processing2/5.png"><br><img src="/2023zjude-10-36/img/processing2/6.png"></p><h2 id="Program-Code"><a href="#Program-Code" class="headerlink" title="Program Code"></a>Program Code</h2><p>Here is the complete program code. Detailed explanations and comments will follow each section.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> controlP5.*;<br><br>ControlP5 cp5;<br>PGraphics canvas;<br><span class="hljs-type">int</span> <span class="hljs-variable">currentColor</span> <span class="hljs-operator">=</span> color(<span class="hljs-number">0</span>);<br><span class="hljs-type">float</span> <span class="hljs-variable">currentStrokeWeight</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>ArrayList&lt;PImage&gt; history = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;PImage&gt;();<br><span class="hljs-type">int</span> <span class="hljs-variable">historyIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  size(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br>  cp5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ControlP5</span>(<span class="hljs-built_in">this</span>);<br><br>  canvas = createGraphics(width, height - <span class="hljs-number">50</span>);<br>  canvas.beginDraw();<br>  canvas.background(<span class="hljs-number">255</span>);<br>  canvas.endDraw();<br><br>  <span class="hljs-comment">// 创建GUI控件，并调整布局</span><br>  cp5.addSlider(<span class="hljs-string">&quot;strokeWeight&quot;</span>)<br>     .setPosition(<span class="hljs-number">10</span>, height - <span class="hljs-number">70</span>)<br>     .setWidth(<span class="hljs-number">100</span>)<br>     .setRange(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>)<br>     .setValue(<span class="hljs-number">4</span>)<br>     .getCaptionLabel().setColor(color(<span class="hljs-number">0</span>)).align(ControlP5.LEFT, ControlP5.BOTTOM_OUTSIDE);<br><br>  cp5.addBang(<span class="hljs-string">&quot;Clear&quot;</span>)<br>     .setPosition(<span class="hljs-number">120</span>, height - <span class="hljs-number">70</span>)<br>     .setSize(<span class="hljs-number">50</span>, <span class="hljs-number">20</span>)<br>     .getCaptionLabel().setColor(color(<span class="hljs-number">0</span>)).align(ControlP5.LEFT, ControlP5.BOTTOM_OUTSIDE);<br><br>  cp5.addBang(<span class="hljs-string">&quot;Undo&quot;</span>)<br>     .setPosition(<span class="hljs-number">180</span>, height - <span class="hljs-number">70</span>)<br>     .setSize(<span class="hljs-number">50</span>, <span class="hljs-number">20</span>)<br>     .getCaptionLabel().setColor(color(<span class="hljs-number">0</span>)).align(ControlP5.LEFT, ControlP5.BOTTOM_OUTSIDE);<br><br>  cp5.addColorWheel(<span class="hljs-string">&quot;colorWheel&quot;</span>, <span class="hljs-number">240</span>, height - <span class="hljs-number">100</span>, <span class="hljs-number">80</span>) <span class="hljs-comment">// 调整位置和大小</span><br>     .getCaptionLabel().setColor(color(<span class="hljs-number">0</span>)).align(ControlP5.LEFT, ControlP5.BOTTOM_OUTSIDE);<br><br>  saveHistory(); <span class="hljs-comment">// 保存初始状态</span><br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>  background(<span class="hljs-number">255</span>);<br>  image(canvas, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>  <span class="hljs-comment">// 绘制工具预览</span><br>  fill(currentColor);<br>  noStroke();<br>  ellipse(mouseX, mouseY, currentStrokeWeight, currentStrokeWeight);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseDragged</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> (mouseY &lt; height - <span class="hljs-number">50</span>) &#123;<br>    updateCanvas();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateCanvas</span><span class="hljs-params">()</span> &#123;<br>  canvas.beginDraw();<br>  canvas.stroke(currentColor);<br>  canvas.strokeWeight(currentStrokeWeight);<br>  canvas.line(mouseX, mouseY, pmouseX, pmouseY);<br>  canvas.endDraw();<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>  canvas.beginDraw();<br>  canvas.background(<span class="hljs-number">255</span>);<br>  canvas.endDraw();<br>  saveHistory();<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> (historyIndex &gt; <span class="hljs-number">0</span>) &#123;<br>    historyIndex--;<br>    canvas = createGraphics(width, height - <span class="hljs-number">50</span>);<br>    canvas.beginDraw();<br>    canvas.image(history.get(historyIndex), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    canvas.endDraw();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">saveHistory</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> (historyIndex &lt; history.size() - <span class="hljs-number">1</span>) &#123;<br>    history.subList(historyIndex, history.size()).clear();<br>  &#125;<br>  <span class="hljs-type">PImage</span> <span class="hljs-variable">snapshot</span> <span class="hljs-operator">=</span> canvas.get();<br>  history.add(snapshot);<br>  historyIndex = history.size() - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">controlEvent</span><span class="hljs-params">(ControlEvent event)</span> &#123;<br>  <span class="hljs-keyword">if</span> (event.isFrom(<span class="hljs-string">&quot;colorWheel&quot;</span>)) &#123;<br>    currentColor = color((<span class="hljs-type">int</span>)event.getController().getValue());<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.getName().equals(<span class="hljs-string">&quot;Clear&quot;</span>)) &#123;<br>    clear();<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.getName().equals(<span class="hljs-string">&quot;Undo&quot;</span>)) &#123;<br>    undo();<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.getName().equals(<span class="hljs-string">&quot;strokeWeight&quot;</span>)) &#123;<br>    currentStrokeWeight = event.getValue();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Initialization-Settings-setup-function"><a href="#Initialization-Settings-setup-function" class="headerlink" title="Initialization Settings (setup function)"></a>Initialization Settings (<code>setup</code> function)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  size(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>); <span class="hljs-comment">// Set window size</span><br>  cp5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ControlP5</span>(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// Initialize controlP5</span><br><br>  canvas = createGraphics(width, height - <span class="hljs-number">50</span>); <span class="hljs-comment">// Create a canvas</span><br>  canvas.beginDraw();<br>  canvas.background(<span class="hljs-number">255</span>); <span class="hljs-comment">// Set the canvas background to white</span><br>  canvas.endDraw();<br><br>  <span class="hljs-comment">// Create controls</span><br>  <span class="hljs-comment">// Including sliders, clear and undo buttons, color wheel</span><br>  <span class="hljs-comment">// ...</span><br><br>  saveHistory(); <span class="hljs-comment">// Save the initial canvas state</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>size(800, 600)</code>: Sets the size of the window.</li><li><code>createGraphics(width, height - 50)</code>: Creates a <code>PGraphics</code> object to be used as the canvas.</li><li><code>canvas.background(255)</code>: Sets the canvas background to white.</li></ul><h3 id="Drawing-Loop-draw-function"><a href="#Drawing-Loop-draw-function" class="headerlink" title="Drawing Loop (draw function)"></a>Drawing Loop (<code>draw</code> function)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>  background(<span class="hljs-number">255</span>); <span class="hljs-comment">// Set background color</span><br>  image(canvas, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// Display current canvas</span><br><br>  <span class="hljs-comment">// Show brush preview</span><br>  fill(currentColor); <span class="hljs-comment">// Set fill color</span><br>  noStroke(); <span class="hljs-comment">// No border</span><br>  ellipse(mouseX, mouseY, currentStrokeWeight, currentStrokeWeight); <span class="hljs-comment">// Draw a circle representing the brush size</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>background(255)</code>: Sets the window background to white on each draw.</li><li><code>image(canvas, 0, 0)</code>: Draws the current canvas content to the window.</li></ul><h3 id="Mouse-Dragging-Event-Handling-mouseDragged-function"><a href="#Mouse-Dragging-Event-Handling-mouseDragged-function" class="headerlink" title="Mouse Dragging Event Handling (mouseDragged function)"></a>Mouse Dragging Event Handling (<code>mouseDragged</code> function)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseDragged</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> (mouseY &lt; height - <span class="hljs-number">50</span>) &#123;<br>    updateCanvas(); <span class="hljs-comment">// Call the function to update the canvas</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>When the mouse is dragged within the canvas area, call the <code>updateCanvas</code> function to draw lines.</li></ul><h3 id="Update-Canvas-updateCanvas-function"><a href="#Update-Canvas-updateCanvas-function" class="headerlink" title="Update Canvas (updateCanvas function)"></a>Update Canvas (<code>updateCanvas</code> function)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateCanvas</span><span class="hljs-params">()</span> &#123;<br>  canvas.beginDraw();<br>  canvas.stroke(currentColor); <span class="hljs-comment">// Set brush color</span><br>  canvas.strokeWeight(currentStrokeWeight); <span class="hljs-comment">// Set brush thickness</span><br>  canvas.line(mouseX, mouseY, pmouseX, pmouseY); <span class="hljs-comment">// Draw a line</span><br>  canvas.endDraw();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>canvas.line(mouseX, mouseY, pmouseX, pmouseY)</code>: Draws a line on the canvas from the previous mouse position to the current position.</li></ul><h3 id="Clear-the-Canvas-clear-function"><a href="#Clear-the-Canvas-clear-function" class="headerlink" title="Clear the Canvas (clear function)"></a>Clear the Canvas (<code>clear</code> function)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>  canvas.beginDraw();<br>  canvas.background(<span class="hljs-number">255</span>); <span class="hljs-comment">// Reset the canvas background to white</span><br>  canvas.endDraw();<br>  saveHistory(); <span class="hljs-comment">// Save the state</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Undo-Operation-undo-function"><a href="#Undo-Operation-undo-function" class="headerlink" title="Undo Operation (undo function)"></a>Undo Operation (<code>undo</code> function)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> (historyIndex &gt; <span class="hljs-number">0</span>) &#123;<br>    historyIndex--;<br>    canvas = createGraphics(width, height - <span class="hljs-number">50</span>);<br>    canvas.beginDraw();<br>    canvas.image(history.get(historyIndex), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// Restore to the previous history state</span><br>    canvas.endDraw();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Use the <code>history</code> array to save the historical states of the canvas. In the undo operation, we revert to the previous state.</li></ul><h3 id="Save-History-State-saveHistory-function"><a href="#Save-History-State-saveHistory-function" class="headerlink" title="Save History State (saveHistory function)"></a>Save History State (<code>saveHistory</code> function)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">saveHistory</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> (historyIndex &lt; history.size() - <span class="hljs-number">1</span>) &#123;<br>    history.subList(historyIndex, history.size()).clear();<br>  &#125;<br> <br><br> <span class="hljs-type">PImage</span> <span class="hljs-variable">snapshot</span> <span class="hljs-operator">=</span> canvas.get();<br>  history.add(snapshot); <span class="hljs-comment">// Save the current state to the history array</span><br>  historyIndex = history.size() - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Handle-Control-Events-controlEvent-function"><a href="#Handle-Control-Events-controlEvent-function" class="headerlink" title="Handle Control Events (controlEvent function)"></a>Handle Control Events (<code>controlEvent</code> function)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">controlEvent</span><span class="hljs-params">(ControlEvent event)</span> &#123;<br>  <span class="hljs-comment">// Handle different control events such as color change, clear, undo, etc.</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>This function handles events from <code>controlP5</code> controls, such as adjusting the brush color and thickness, and clear and undo operations.</li></ul><h2 id="Results-Display"><a href="#Results-Display" class="headerlink" title="Results Display"></a>Results Display</h2><p>The GUI interface of the drawing program obtained through processing programming using the above code is as follows.<br><img src="/2023zjude-10-36/img/processing2/7.png"><br>Try using it to draw a picture.<br><img src="/2023zjude-10-36/img/processing2/8.png"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Developing this Processing drawing application was an enlightening and creative experience. It demonstrated how to utilize Processing’s fundamental capabilities for real-time drawing and user interaction, providing an intuitive understanding of the basics of computer graphics and interface design.By integrating the <code>controlP5</code> library, the project revealed the potential of incorporating external libraries into the Processing environment to enhance functionality. Overall, the development process of this drawing application was enjoyable and educational, showcasing the immense potential of programming as a creative tool.</p>]]></content>
    
    
    <categories>
      
      <category>Interface application programming</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3D Print</title>
    <link href="/2023zjude-10-36/2023/12/31/3DPrint/"/>
    <url>/2023zjude-10-36/2023/12/31/3DPrint/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Learn-about-3D-printing-new-applications-related-materials-machines-new-paper"><a href="#1-Learn-about-3D-printing-new-applications-related-materials-machines-new-paper" class="headerlink" title="1.Learn about 3D printing (new applications, related materials, machines, new paper):"></a>1.Learn about 3D printing (new applications, related materials, machines, new paper):</h1><p>3D printing technology is constantly evolving, not only in terms of new areas of application, but also in terms of the materials, machines and technologies that are constantly emerging.</p><h2 id="1-1-New-applications"><a href="#1-1-New-applications" class="headerlink" title="1.1 New applications"></a>1.1 New applications</h2><p>I. Healthcare: 3D printing is being used to create personalised prosthetics, customised medical devices and bioprinting (biomaterials to make tissues and organs).<br><img src="/2023zjude-10-36/img/3Dprint/1.jpg"></p><p>II. Construction: Large-scale 3D printers can build houses and structures, reducing construction time and costs.<br><img src="/2023zjude-10-36/img/3Dprint/2.jpg"></p><p>III. Aerospace: for the manufacture of lightweight components and prototyping.<br><img src="/2023zjude-10-36/img/3Dprint/3.jpg"></p><p>IV. Automotive manufacturing: Manufacturing of customised automotive components, including automotive interiors and engine parts.<br><img src="/2023zjude-10-36/img/3Dprint/4.jpg"></p><p>V. Fashion field: for conceptual clothing design and production.<br><img src="/2023zjude-10-36/img/3Dprint/5.jpg"></p><h2 id="1-2-New-materials"><a href="#1-2-New-materials" class="headerlink" title="1.2 New materials"></a>1.2 New materials</h2><p>In addition to the original thermoplastic polymerisation materials and photosensitive resins, more and more new materials are now emerging.</p><p>I. metal materials: new metal 3D printing materials, such as titanium alloys and aluminium alloys, continue to emerge for the manufacture of strong, corrosion-resistant parts.</p><p>II. Biomaterials: Materials used for bioprinting, such as bioink, are used to make human tissues and organs.</p><p>III. Ceramics and glass: gradually being used to print ceramic and glass products, such as tableware and decorative items.</p><p>IV. Sustainable materials: including biodegradable plastics, recycled plastics, etc., for environmentally friendly and sustainable manufacturing.</p><h2 id="1-3-New-machines"><a href="#1-3-New-machines" class="headerlink" title="1.3 New machines"></a>1.3 New machines</h2><p>I. Multi-material printing: A single machine can print with multiple materials at the same time, expanding the range of applications and design possibilities.</p><p>II. Larger sized printers: printers for large-scale projects such as construction continue to evolve and are able to print larger sized structures.</p><p>III. Increased speed and accuracy: new printing technologies and machines have increased print speed and print accuracy, making them more suitable for a wide range of needs.</p><p>IV. Automation and Intelligence: Increased automation, including intelligent design software, automated material change and printing process monitoring.</p><h2 id="1-4-New-paper"><a href="#1-4-New-paper" class="headerlink" title="1.4 New paper"></a>1.4 New paper</h2><p>A number of studies are currently exploring the use of paper or similar materials for novel printing techniques.</p><p>I. 3D printing with paper models:</p><p>Some people will use specific types of paper (e.g., thick cardboard or specially textured paper) to create the shell or external structure of a 3D printed model. These papers will have a specific shape pattern or structure printed onto them by 3D printing technology, and then these papers will be combined to form a 3D object.</p><p>II. 3D printing support structures:</p><p>In some 3D printing techniques, paper is used as part of the support structure. These papers may be removed after the printing is complete and serve to support the printed object, especially for some complex structures.</p><p>III. paper substrates in flexible electronics:<br><img src="/2023zjude-10-36/img/3Dprint/6.jpg"></p><p>Some research has looked at using paper or similar paper substrates on which flexible electronic components can be printed by certain techniques such as inkjet printing or other similar methods. These flexible electronic components can be used in flexible displays, sensors, and other areas.</p><h1 id="2-Our-3D-printing-project"><a href="#2-Our-3D-printing-project" class="headerlink" title="2.Our 3D printing project"></a>2.Our 3D printing project</h1><h2 id="2-1-Finished-product-effect-display"><a href="#2-1-Finished-product-effect-display" class="headerlink" title="2.1 Finished product effect display"></a>2.1 Finished product effect display</h2><p>Using 3D printing to print small models of conchs for large jobs<br><img src="/2023zjude-10-36/img/3Dprint/7.jpg"></p><p>Printing Movable Models<br><img src="/2023zjude-10-36/img/3Dprint/8.jpg"></p><p>Printable Models<br><img src="/2023zjude-10-36/img/3Dprint/9.jpg"><br><img src="/2023zjude-10-36/img/3Dprint/10.jpg"></p><h2 id="2-2-3D-Printing-Process-Demonstration"><a href="#2-2-3D-Printing-Process-Demonstration" class="headerlink" title="2.2 3D Printing Process Demonstration"></a>2.2 3D Printing Process Demonstration</h2><p>Step 1: Prepare Bambu Studio</p><p>Download the Bambu Studio software from the website.<br><img src="/2023zjude-10-36/img/3Dprint/11.jpg"></p><p>Step 2: Prepare models</p><p>Prepare to print three types of models: 1. related to big jobs; 2. movable; 3. Assemblable<br><img src="/2023zjude-10-36/img/3Dprint/12.jpg"></p><p>Step 3: Open in Bambu Studio and adjust parameters with slicing software</p><p>Model I: Conch model related to large operations<br><img src="/2023zjude-10-36/img/3Dprint/13.jpg"><br>Model 2: movable small dinosaur model<br><img src="/2023zjude-10-36/img/3Dprint/14.jpg"><br>Model 3: assemblable Christmas tree model<br><img src="/2023zjude-10-36/img/3Dprint/15.jpg"><br><img src="/2023zjude-10-36/img/3Dprint/16.jpg"></p><p>Step 4: Use 3D printer to manufacture it<br><img src="/2023zjude-10-36/img/3Dprint/17.jpg"><br><img src="/2023zjude-10-36/img/3Dprint/18.jpg"></p><p>Step 5: Sanding the model</p><p>Since models 1 and 3 do not have any obvious supports to deal with, the sanding process for model 2 is shown again.<br><img src="/2023zjude-10-36/img/3Dprint/19.jpg"><br>As you can see, since some of the parts in the middle of the movable model are overhanging, the bottom of the model above has some support to deal with.<br><img src="/2023zjude-10-36/img/3Dprint/20.jpg"><br>The bottom support can be removed by sanding and removing it. With the support removed, the model is ready for movement.</p><p>Step 6: Showcase</p><p>Model 1: Conch model related to the big work<br><img src="/2023zjude-10-36/img/3Dprint/7.jpg"><br>Model 2: movable small dinosaur model<br><img src="/2023zjude-10-36/img/3Dprint/21.jpg"><br><img src="/2023zjude-10-36/img/3Dprint/22.jpg"><br>Model 3: assemblable Christmas tree model<br><img src="/2023zjude-10-36/img/3Dprint/9.jpg"><br><img src="/2023zjude-10-36/img/3Dprint/10.jpg"></p><p>Step 7: Find new research or applications</p><p>You can keep up with the latest trends and applications in 3D printing by following the relevant forums, communities and official channels on Bambu Studio, as well as GitHub.</p><p>Step 8: Try to read the G-code</p><p>When using Bambu Studio, it will generate G-code for our model. This G-code is essentially a set of instructions that our 3D printer will follow to create prints. It is important for us to familiarise ourselves with the basics of G-code. Understanding G-code will help us get a handle on how our printer interprets and executes print jobs, and it will be especially useful when we need to troubleshoot or make specific adjustments to our printing process.</p>]]></content>
    
    
    <categories>
      
      <category>3D Print</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Computer-controlled cutting</title>
    <link href="/2023zjude-10-36/2023/12/31/cutting/"/>
    <url>/2023zjude-10-36/2023/12/31/cutting/</url>
    
    <content type="html"><![CDATA[<p>Laser cutting is a high-precision, efficient material cutting technique that employs a laser beam to thermally process materials through processes such as melting, vaporization, or combustion. Laser cutting finds widespread applications in cutting and engraving various materials such as metals, plastics, wood, paper, and fabrics. Here is an introduction to laser cutting and the materials commonly experimented with for laser cutting. </p><ol><li>Metal Materials:</li></ol><p>Steel: Laser cutting is extensively used in metal processing, particularly for steel materials. It can cut steel sheets of different thicknesses, used in manufacturing automotive parts, aerospace components, etc.</p><p>Aluminum Alloys: Laser cutting is also suitable for aluminum alloys, used in manufacturing aerospace components, electronic equipment casings, etc.<br>Stainless Steel: Stainless steel is a common material for laser cutting, used in manufacturing kitchenware, architectural decorations, etc.</p><ol start="2"><li>Non-Metal Materials:</li></ol><p>Plastics: Laser cutting can be used to cut various plastic materials, such as acrylics, polycarbonates, used in manufacturing plastic components, signage, etc.<br>Wood: For wood, laser cutting can be employed to cut intricate wooden structures, used in furniture, model-making, etc.</p><p>Paper and Fabric: Laser cutting has widespread applications in cutting paper and fabrics, for example, in paper crafts, garment manufacturing, etc.</p><ol start="3"><li>Other Materials:</li></ol><p>Rubber: Laser cutting can achieve precise cutting of rubber materials, used in manufacturing seals, rubber pads, etc.</p><p>Glass: While laser cutting glass is relatively complex, it finds applications in glass engraving and the manufacture of glass signage.</p><p>Before attempting laser cutting on different materials, it is important to understand the characteristics of each material, including melting points, reflectivity, absorbance, etc. This helps in determining laser cutting parameters such as laser power, speed, and focal length. </p><p>Additionally, it is crucial to ensure proper safety measures are taken, as laser cutting involves a high-energy laser beam with potential hazards to the eyes and skin.</p><p>The following shows how the project was made.</p><ol><li>Designing Drawings in CAD Software</li></ol><p>Using computer-aided design software AutoCAD, draw geometric shapes, including lines, rectangles, circles, polygons, etc., in the drawing area to create the desired parts or graphics. Add dimensions and annotations to ensure the drawn graphics meet design requirements. These dimensions will assist in subsequent assembly by connecting each component. Export the design file into a laser cutting machine-readable file format, DXF (Drawing Exchange Format).<br><img src="/2023zjude-10-36/img/cutting/1.png"><br><img src="/2023zjude-10-36/img/cutting/2.png"></p><ol start="2"><li>Utilizing the Laser Cutting Machine</li></ol><p>Open the laser cutting machine, place the material to be cut on the machine’s worktable, and ensure it is securely fixed in the appropriate position. Use the laser cutting machine’s alignment system to ensure the material is correctly positioned for precise laser cutting. On the control panel of the laser cutting machine, select the type of material to be cut, allowing the machine to adjust laser power and speed to ensure cutting quality. For this cutting operation, a 2mm thick wooden board is used. Transfer the design file to the laser cutting machine. Start the machine, monitor the process to ensure everything is functioning correctly.<br><img src="/2023zjude-10-36/img/cutting/22.jpg"><br><img src="/2023zjude-10-36/img/cutting/3.jpg"></p><ol start="3"><li>Completion, Obtaining Components</li></ol><p>Complete the cutting process, inspect the quality and precision of the cut components, ensuring they match the design file.<br><img src="/2023zjude-10-36/img/cutting/4.jpg"><br><img src="/2023zjude-10-36/img/cutting/5.jpg"></p><ol start="4"><li>Assembly</li></ol><p>Remove each component from the wooden board and proceed with assembly. Upon completion of the assembly, the outline of the whale lamp is obtained.<br><img src="/2023zjude-10-36/img/cutting/6.jpg"></p><ol start="5"><li>Combined with Arduino</li></ol><p>Description: An RGB LED is used, in this process the colour ratio is gradually mixed by breathing, and the effect of changing from blue to purple is achieved by adjusting the ratio of the mixed colours. (Refer to the arduino section for the specific introduction of RGB LED)</p><p>code:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">int redPin = 9;   // Connect the red pin of the RGB LED to the Arduino<span class="hljs-string">&#x27;s digital pin 9</span><br><span class="hljs-string">int greenPin = 10; // Connect the green pin of the RGB LED to the Arduino&#x27;</span>s digital pin 10<br>int bluePin = 11;  // Connect the blue pin of the RGB LED to the digital pin 11 of the Arduino<br><br>void <span class="hljs-function"><span class="hljs-title">setup</span></span>() &#123;<br>  // Initialise RGB LED pins to output mode<br>  pinMode(redPin, OUTPUT);<br>  pinMode(greenPin, OUTPUT);<br>  pinMode(bluePin, OUTPUT);<br>&#125;<br><br>void <span class="hljs-function"><span class="hljs-title">loop</span></span>() &#123;<br>  breatheEffect();<br>&#125;<br><br>void <span class="hljs-function"><span class="hljs-title">breatheEffect</span></span>() &#123;<br>  int brightness;<br>  <br>  // Low to high, breathing light effect<br>  <span class="hljs-keyword">for</span> (brightness = 0; brightness &lt; 255; brightness++) &#123;<br>    analogWrite(redPin, map(brightness, 0, 255, 0, 250));   // Change from blue to purple<br>    analogWrite(greenPin, 0);<br>    analogWrite(bluePin, map(brightness, 0, 255, 160, 255));<br>    delay(10);  // Controlling the speed of change<br>  &#125;<br>  <br>  // High to low, breathing light effect<br>  <span class="hljs-keyword">for</span> (brightness = 255; brightness &gt;= 0; brightness--) &#123;<br>    analogWrite(redPin, map(brightness, 0, 255, 0, 250));   // Change from purple to blue<br>    analogWrite(greenPin, 0);<br>    analogWrite(bluePin, map(brightness, 0, 255, 160, 255));<br>    delay(10);  // Controlling the speed of change<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023zjude-10-36/img/cutting/77.jpg"><br>6. Finished Product-Whale Lamp<br><img src="/2023zjude-10-36/img/cutting/7.jpg"><br><img src="/2023zjude-10-36/img/cutting/8.jpg"><br><img src="/2023zjude-10-36/img/cutting/9.jpg"><br><img src="/2023zjude-10-36/img/cutting/10.gif"></p><ol start="7"><li>Whale Lamp &amp; Final Project</li></ol><p>Our final project aims to call for people’s attention to and protection of the marine environment, coexisting and breathing with the ocean. Whales are commonly regarded as symbols of the marine ecosystem, representing a vital force within the ocean. A whale-shaped lamp serves as a symbolic representation consistent with the theme of the final project, emphasizing the significance of the marine environment. It may be further incorporated into the final project in subsequent stages.</p>]]></content>
    
    
    <categories>
      
      <category>Computer-controlled cutting</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Arduino Flowing Light</title>
    <link href="/2023zjude-10-36/2023/10/26/FlowingLight/"/>
    <url>/2023zjude-10-36/2023/10/26/FlowingLight/</url>
    
    <content type="html"><![CDATA[<h1 id="Arduino-Flowing-Light-Demonstration"><a href="#Arduino-Flowing-Light-Demonstration" class="headerlink" title="Arduino Flowing Light Demonstration"></a>Arduino Flowing Light Demonstration</h1><h2 id="Hardware-equipment"><a href="#Hardware-equipment" class="headerlink" title="Hardware equipment"></a>Hardware equipment</h2><p>arduino uno,led<em>10,220 ohm resistor</em>10,several DuPont wires</p><h2 id="Circuit-connection"><a href="#Circuit-connection" class="headerlink" title="Circuit connection:"></a>Circuit connection:</h2><p> The circuit connection is shown in the figure:</p><p><img src="/2023zjude-10-36/img/Arduino1/line.png"></p><h2 id="Code-display"><a href="#Code-display" class="headerlink" title="Code display:"></a>Code display:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">The code <span class="hljs-keyword">for</span> flowing light is as follows:<br><br>int a,b,i;<br>void <span class="hljs-function"><span class="hljs-title">setup</span></span>() <br>&#123;                <br><span class="hljs-keyword">for</span>(i=3;i&lt;=12;i++)<br>  pinMode(i, OUTPUT);//Declare 10 LED lights as outputs<br>&#125;<br>void <span class="hljs-function"><span class="hljs-title">loop</span></span>() <br>&#123;<br>  <span class="hljs-keyword">for</span>(a=3;a&lt;=12;a++)<br>  &#123;<br>  digitalWrite(a, HIGH);  <br>  delay(50);<br>  digitalWrite(a, LOW);  <br>  delay(50);<br>  &#125;<br>  // Forward flow<br>  <span class="hljs-keyword">for</span>(b=12;b&gt;=3;b--)<br>  &#123;<br>  digitalWrite(b, HIGH); <br>  delay(50);<br>  digitalWrite(b, LOW);  <br>  delay(50);<br>  &#125;//Reverse flow<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Physical-display"><a href="#Physical-display" class="headerlink" title="Physical display"></a>Physical display</h2><p><img src="/2023zjude-10-36/img/Arduino1/show.gif"></p><p><img src="/2023zjude-10-36/img/Arduino1/light1.jpg"></p><p><img src="/2023zjude-10-36/img/Arduino1/light2.jpg"></p><p><img src="/2023zjude-10-36/img/Arduino1/light3.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Arduino</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FinalPro-Market</title>
    <link href="/2023zjude-10-36/2023/10/23/Market/"/>
    <url>/2023zjude-10-36/2023/10/23/Market/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Final Project</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FinalPro-Innovation</title>
    <link href="/2023zjude-10-36/2023/10/23/Innovation/"/>
    <url>/2023zjude-10-36/2023/10/23/Innovation/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Final Project</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FinalPro-How to make</title>
    <link href="/2023zjude-10-36/2023/10/23/make/"/>
    <url>/2023zjude-10-36/2023/10/23/make/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Final Project</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FinalPro-Topic</title>
    <link href="/2023zjude-10-36/2023/10/23/Topic/"/>
    <url>/2023zjude-10-36/2023/10/23/Topic/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Final Project</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CADDesign</title>
    <link href="/2023zjude-10-36/2023/10/16/CADDesign/"/>
    <url>/2023zjude-10-36/2023/10/16/CADDesign/</url>
    
    <content type="html"><![CDATA[<h1 id="Overview-of-Works"><a href="#Overview-of-Works" class="headerlink" title="Overview of Works"></a>Overview of Works</h1><h2 id="Simulation-of-Tangential-Motion-in-Disc-type-Cam-Structures"><a href="#Simulation-of-Tangential-Motion-in-Disc-type-Cam-Structures" class="headerlink" title="Simulation of Tangential Motion in Disc-type Cam Structures"></a>Simulation of Tangential Motion in Disc-type Cam Structures</h2><p>Motion Effect<br><img src="/2023zjude-10-36/img/CAD/gif.gif"><br>Component Engineering Drawing<br><img src="/2023zjude-10-36/img/CAD/figure.jpg"></p><h2 id="Pendulum-motion-simulation"><a href="#Pendulum-motion-simulation" class="headerlink" title="Pendulum motion simulation"></a>Pendulum motion simulation</h2><p>Motion Effect<br><img src="/2023zjude-10-36/img/CAD/mcy1.gif"><br>Timeline Process<br><img src="/2023zjude-10-36/img/CAD/mcy2.gif"></p><h2 id="Motion-Simulation-of-Four-bar-Mechanism"><a href="#Motion-Simulation-of-Four-bar-Mechanism" class="headerlink" title="Motion Simulation of Four-bar Mechanism"></a>Motion Simulation of Four-bar Mechanism</h2><p><img src="/2023zjude-10-36/img/CAD/zy.gif"></p><h2 id="Motion-Simulation-of-Cam-Mechanisms"><a href="#Motion-Simulation-of-Cam-Mechanisms" class="headerlink" title="Motion Simulation of Cam Mechanisms"></a>Motion Simulation of Cam Mechanisms</h2><p><img src="/2023zjude-10-36/img/CAD/gzk.gif"></p><h2 id="Schmidt-Coupling"><a href="#Schmidt-Coupling" class="headerlink" title="Schmidt Coupling"></a>Schmidt Coupling</h2><p><img src="/2023zjude-10-36/img/CAD/lhc.gif"><br><img src="/2023zjude-10-36/img/CAD/l8.png"></p><h1 id="Disc-cam-structure-tangent-motion-simulation-Modelling-process"><a href="#Disc-cam-structure-tangent-motion-simulation-Modelling-process" class="headerlink" title="Disc cam structure tangent motion simulation Modelling process"></a>Disc cam structure tangent motion simulation Modelling process</h1><p>1.Draw a circle with a diameter of 30mm and its centre at the origin.<br>2.Set a circle with diameters of 3<em>d1+0.1, 3</em>d1+12.1 above the origin of the y-axis.<br><img src="/2023zjude-10-36/img/CAD/1.png"><br><img src="/2023zjude-10-36/img/CAD/2.png"></p><p>3.Stretch the set circle to a distance of 1&#x2F;6*d1 from the circle.<br><img src="/2023zjude-10-36/img/CAD/3.png"></p><p>4.Set up a rectangle on the plane with width 1&#x2F;6*d1 and height 57mm and make the rectangle symmetrical to the y-axis.<br><img src="/2023zjude-10-36/img/CAD/4.png"><br><img src="/2023zjude-10-36/img/CAD/5.png"></p><p>5.Circle the rectangle with the origin as the centre point for 3<br><img src="/2023zjude-10-36/img/CAD/6.png"></p><p>6.Stretch these three rectangles by -1&#x2F;6*d1 and merge them with the cylinder.<br><img src="/2023zjude-10-36/img/CAD/7.png"><br><img src="/2023zjude-10-36/img/CAD/8.png"></p><p>7.Return to the plane and set up a circle with a diameter of 2&#x2F;3*d1 centred on the origin.<br><img src="/2023zjude-10-36/img/CAD/9.png"></p><p>8.Stretch the circle by 5&#x2F;6*d1.<br><img src="/2023zjude-10-36/img/CAD/10.png"></p><p>9.Set up a slot in the y-axis and stretch it on both sides with a distance of 4&#x2F;15<em>d1 on one side and -1&#x2F;10</em>d1 on the other side<br><img src="/2023zjude-10-36/img/CAD/11.png"><br><img src="/2023zjude-10-36/img/CAD/12.png"></p><p>10.Set a rectangle along the left edge of the slot with the centre of the upper circle<br><img src="/2023zjude-10-36/img/CAD/13.png"></p><p>11.Set up circles with diameters of 1&#x2F;6<em>d1 and 2&#x2F;5</em>d1 centred on the lower centre of the groove, with both circles having the same centre, and tangent the larger circle to the inside of the ring.<br><img src="/2023zjude-10-36/img/CAD/14.png"><br><img src="/2023zjude-10-36/img/CAD/15.png"></p><p>12.Set circles of diameters 2&#x2F;5<em>d1, 1&#x2F;6</em>d1 above the lower centre of the groove, with the two circles having the same centre, and tangent the large circle to the outside of the ring.<br><img src="/2023zjude-10-36/img/CAD/16.png"><br><img src="/2023zjude-10-36/img/CAD/17.png"></p><p>13.Stretch the set rectangle by 50mm.<br><img src="/2023zjude-10-36/img/CAD/18.png"></p><p>14.Stretch the two small circles into holes and create a new part.<br><img src="/2023zjude-10-36/img/CAD/19.png"></p><p>15.Stretch the two small cylinders new part -7&#x2F;30*d1<br><img src="/2023zjude-10-36/img/CAD/20.png"><br><img src="/2023zjude-10-36/img/CAD/21.png"></p><p>16.Stretch the two large circles 7&#x2F;30*d1<br><img src="/2023zjude-10-36/img/CAD/22.png"></p><p>17.Project the top outer circle of the slot and set a rectangle at the top with the same scale and centre as the outer edge<br><img src="/2023zjude-10-36/img/CAD/23.png"><br><img src="/2023zjude-10-36/img/CAD/24.png"></p><p>18.Stretch both sides of the rectangle, one side -1&#x2F;6*d1, and d1+5<br><img src="/2023zjude-10-36/img/CAD/25.png"></p><p>19.Stretch the circle outside the initial circle 2&#x2F;3*d1<br><img src="/2023zjude-10-36/img/CAD/26.png"></p><p>20.set an alien in the yz plane and stretch it symmetrically 1&#x2F;6*d1<br><img src="/2023zjude-10-36/img/CAD/27.png"><br><img src="/2023zjude-10-36/img/CAD/28.png"></p><p>21.Merge the resulting shape with the rectangular body with the circular body and set it to the rigid group<br><img src="/2023zjude-10-36/img/CAD/29.png"><br><img src="/2023zjude-10-36/img/CAD/30.png"></p><p>22.Set the “Mercedes-Benz Label” shape to rotate the z-axis connection.<br><img src="/2023zjude-10-36/img/CAD/31.png"></p><p>23.Set up a rotational connection between two small cylinders.<br><img src="/2023zjude-10-36/img/CAD/32.png"><br><img src="/2023zjude-10-36/img/CAD/33.png"></p><p>24.Slide coupling of slots along the z-axis.<br><img src="/2023zjude-10-36/img/CAD/34.png"></p><p>25.Form a tangent relationship between the upper small cylinder and the ring.<br><img src="/2023zjude-10-36/img/CAD/35.png"></p><p>26.Final GIF<br><img src="/2023zjude-10-36/img/CAD/36gif.gif"></p><p>27.Showing data parameters<br><img src="/2023zjude-10-36/img/CAD/37.png"></p><h1 id="Schmidt-Coupling-Modeling-Process"><a href="#Schmidt-Coupling-Modeling-Process" class="headerlink" title="Schmidt Coupling Modeling Process"></a>Schmidt Coupling Modeling Process</h1><p>The design for this project is a simplified structure of a Schmidt coupling. Below are the specific modeling steps:</p><p>1.First, create a sketch of three main axes, and select the top view as the sketch plane. Use a circular array to obtain all three sides as shown in the sketch below:<br><img src="/2023zjude-10-36/img/CAD/l1.png"><br>2.Extend the sketch of the main axes, and repeat the previous steps as shown in the following diagram. In the end, you will have three main axes as depicted in the image:<br><img src="/2023zjude-10-36/img/CAD/l2.png"><br>3.Draw a sketch for the connecting shaft as shown in the image.<br><img src="/2023zjude-10-36/img/CAD/l3.png"><br>4.After extending the connecting shaft, perform a move&#x2F;copy operation to obtain the desired quantity of connecting shafts as shown in the image:<br><img src="/2023zjude-10-36/img/CAD/l4.png"><br>5.Select a palne on the main axis to create a sketch, then establish a secondary connecting shaft as shown in the image:<br><img src="/2023zjude-10-36/img/CAD/l5.png"><br>6.After repeating the above operations, you will obtain the required components as shown in the image:<br><img src="/2023zjude-10-36/img/CAD/l6.png"><br>7.Once you’ve converted the entities into components, assemble the various parts by selecting the center and the plane, then choose a rotational motion as shown in the image:<br><img src="/2023zjude-10-36/img/CAD/l7.png"><br>8.Repeat the above steps to connect all the shafts and secure the base. The assembly is now complete.<br><img src="/2023zjude-10-36/img/CAD/l8.png"></p><h1 id="Try-one-plugins-and-used-in-our-design"><a href="#Try-one-plugins-and-used-in-our-design" class="headerlink" title="Try one plugins and used in our design"></a>Try one plugins and used in our design</h1><p>What our group tried was the Metric Hex Nut Generator plugin.</p><ol><li>First of all, we search for Fusion360 plugins on the AUTODESK App Store.<br><img src="/2023zjude-10-36/img/CAD/plugin/1.jpg"></li><li>We chose the Metric Hex Nut Generator plugin to try.<br><img src="/2023zjude-10-36/img/CAD/plugin/2.jpg"></li><li>Install the plug-in in the software.<br><img src="/2023zjude-10-36/img/CAD/plugin/3.png"></li><li>Next you can use the plug-in to make Metric Hex Nut Generator.<br><img src="/2023zjude-10-36/img/CAD/plugin/4.jpg"></li><li>And you can also set your own parameters to adjust to the desired shape.<br><img src="/2023zjude-10-36/img/CAD/plugin/5.png"></li></ol><h1 id="Introduction-to-other-modeling-software"><a href="#Introduction-to-other-modeling-software" class="headerlink" title="Introduction to other modeling software."></a>Introduction to other modeling software.</h1><h2 id="Blender"><a href="#Blender" class="headerlink" title="Blender"></a>Blender</h2><p><img src="/2023zjude-10-36/img/CAD/blender.jpg"><br>Blender is a free and open-source 3D computer graphics software used for creating, rendering, and animating 3D content. It offers a wide range of features, including 3D modeling, material and texture creation, rendering, animation, compositing, layout, and more, making it widely used in various fields such as film production, game development, architectural visualization, scientific visualization, virtual reality, and more.</p><p>Here are some key features and functions of Blender:<br>3D Modeling: Blender allows users to create various 3D models, including geometries, characters, buildings, landscapes, and more. It provides multiple modeling tools, such as polygon modeling, subsurface subdivision modeling, and sculpting tools, enabling users to precisely shape their models.</p><p>Materials and Textures: Users can create materials for their models and then add textures and maps to enhance the appearance and texture of the models.</p><p>Rendering: Blender includes a powerful rendering engine for generating realistic images and animations. It supports ray tracing, real-time rendering, and various rendering effects.</p><p>Animation: Blender allows users to create animations for objects, including keyframe animation, skeletal animation, and physics simulations, making it an ideal tool for producing animated films and games.</p><p>Compositing and Special Effects: Users can perform video compositing and add special effects within Blender, making it a top-notch tool for video post-processing.</p><p>Layout and Design: Blender also features a set of layout tools for creating graphic design, animated titles, interfaces, and interactive content.</p><p>Scripting and Plugin Support: Blender is extensible, and users can write custom tools and plugins using Python scripting to meet their specific needs.</p><p>Free and Open Source: Blender is free to download and use. It is also open-source software, allowing users to view and modify its source code.</p><p>Blender’s user interface may be a bit steep for beginners, but it has a strong community and numerous online tutorials and resources to help users get started. Whether you are an artist, designer, game developer, or animator, Blender is a powerful tool to help you realize various 3D creative projects.</p><h2 id="ZBrush"><a href="#ZBrush" class="headerlink" title="ZBrush"></a>ZBrush</h2><p><img src="/2023zjude-10-36/img/CAD/zbrush.jpg"><br>ZBrush is a professional digital sculpting and 3D modeling software developed by Pixologic. It is widely used in the fields of digital art, 3D modeling, character design, and sculpting to create highly detailed 3D models. Here are some key features and functions of ZBrush:</p><p>Digital Sculpting: One of the primary functions of ZBrush is digital sculpting, allowing artists to paint and sculpt on 3D models using fine brushes and tools. This enables users to create highly complex and detailed models, including characters, creatures, environments, and more.</p><p>High-Resolution Models: ZBrush supports very high model resolutions, which means users can add minute details such as textures, wrinkles, skin textures, etc., without losing detail.</p><p>Polygon and Subdivision Modeling: Users can create basic polygon models and then refine them with subdivision surfaces to add more detail. This workflow allows artists to make fine modifications to the model.</p><p>ZBrush Brush System: ZBrush has an extensive brush library, including standard brushes, array brushes, deform brushes, and more, allowing artists to achieve various effects and textures.</p><p>Polygon Painting and Sculpting: ZBrush allows users to paint polygons directly on the model without the need for manual topology drawing, making model creation and modification more flexible.</p><p>Facial Modeling and Character Design: ZBrush is powerful for creating character models and facial expressions, suitable for digital character design and animation production.</p><p>Real-Time Preview and Rendering: Users can perform real-time rendering in ZBrush to see how the model looks under different lighting conditions, enhancing their understanding of the final appearance.</p><p>ZRemesher and Polygon Retopology: ZBrush provides automatic retopology tools to help users generate clean polygon topology for subsequent modeling and animation.</p><p>Plugin Support: ZBrush supports plugins to extend its functionality, adding extra tools and effects.</p><p>ZBrush is a preferred tool for digital artists, game developers, visual effects professionals, and modelers, as it offers excellent sculpting and modeling tools to create high-quality 3D models and characters. While ZBrush may have a learning curve for beginners, it excels in creating complex digital art and 3D models.</p>]]></content>
    
    
    <categories>
      
      <category>CAD</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WebPageBuild</title>
    <link href="/2023zjude-10-36/2023/10/16/WebPageBuild/"/>
    <url>/2023zjude-10-36/2023/10/16/WebPageBuild/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Install-Node-js"><a href="#1-Install-Node-js" class="headerlink" title="1.Install Node.js"></a>1.Install Node.js</h1><p>Double-click the installation package to install.<br><img src="/2023zjude-10-36/img/webpage/node.png"></p><h1 id="2-Create-GitHub-Page"><a href="#2-Create-GitHub-Page" class="headerlink" title="2.Create GitHub Page"></a>2.Create GitHub Page</h1><p>Create a new repository, the repository name should match the username. Format: name.github.io.</p><p>The “name” needs to match your username on xxx.github.com, or else you won’t be able to access name.github.io properly.<br><img src="/2023zjude-10-36/img/webpage/1.png"><br>Access the repository’s Settings, go to Pages, turn on the page switch, and select the “main” branch.<br><img src="/2023zjude-10-36/img/webpage/2.png"></p><h1 id="3-Group-Collaboration"><a href="#3-Group-Collaboration" class="headerlink" title="3.Group Collaboration"></a>3.Group Collaboration</h1><p>Add team members to the repository to collaborate on project management.<br><img src="/2023zjude-10-36/img/webpage/collaborator.png"><br>Our group members play different roles based on their strengths and collaborate to complete course projects together.The composition of the team members is as follows.<br><img src="/2023zjude-10-36/img/webpage/f1.png"><br>For more detailed team and member introductions, please click on “About” or click on each person’s name on the “About” page to view personal information of team members.</p><h1 id="4-Run-Git"><a href="#4-Run-Git" class="headerlink" title="4.Run Git"></a>4.Run Git</h1><p>We use the brew command to install git. Run the following command in the command line window:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>git<br></code></pre></td></tr></table></figure><p>After successfully installing Git, check the Git version：<br><img src="/2023zjude-10-36/img/webpage/f2.png"><br>Clone project files from remote repository to local location：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> clone https://github.com/NexMaker-Fab/<span class="hljs-number">2023</span>zjude-<span class="hljs-number">10</span>-<span class="hljs-number">36</span>.git<br><span class="hljs-attribute">cd</span> <span class="hljs-number">2023</span>zjude-<span class="hljs-number">10</span>-<span class="hljs-number">36</span>.git<br><span class="hljs-attribute">ls</span><br></code></pre></td></tr></table></figure><p><img src="/2023zjude-10-36/img/webpage/f3.png"><br>Modify the project locally. After installing the hexo framework on the local machine, modify its configuration file (refer to the “Deployment” section for details). You can directly push the content back to the GitHub repository using the following command in hexo. Run the following command step by step in the vs code terminal:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo cl</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>Install GitHub Desktop by double-clicking on the installation package.<br><img src="/2023zjude-10-36/img/webpage/gitDesktop.png"><br>After a successful installation, log in to your GitHub account and then pull the corresponding repository.<br><img src="/2023zjude-10-36/img/webpage/gitDesktop2.png"><br>Edit the repository files in VScode, save your changes, and then push the modified content back to the repository.<br><img src="/2023zjude-10-36/img/webpage/gitDesktop3.png"></p><h1 id="5-Install-Hexo"><a href="#5-Install-Hexo" class="headerlink" title="5.Install Hexo"></a>5.Install Hexo</h1><p>Enter the following in the command line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli <br></code></pre></td></tr></table></figure><h2 id="Initialize-the-Hexo-project"><a href="#Initialize-the-Hexo-project" class="headerlink" title="Initialize the Hexo project."></a>Initialize the Hexo project.</h2><p>The Hexo project will automatically create all the necessary files for your website in the target folder. Make sure to enter the command in an empty folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><p>After a successful initialization, files will be automatically generated in the folder.<br><img src="/2023zjude-10-36/img/webpage/hexoFolders.png"><br>Install the dependency packages:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><h2 id="Locally-view-the-Hexo-service"><a href="#Locally-view-the-Hexo-service" class="headerlink" title="Locally view the Hexo service:"></a>Locally view the Hexo service:</h2><p>Generate static files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br>or<br>hexo g<br></code></pre></td></tr></table></figure><p>Start the local server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br>or<br>hexo s<br></code></pre></td></tr></table></figure><p>Afterward, access <a href="http://localhost:4000/">http://localhost:4000</a> in your web browser for local preview.<br><img src="/2023zjude-10-36/img/webpage/3.png"></p><h1 id="6-Install-the-Fluid-theme"><a href="#6-Install-the-Fluid-theme" class="headerlink" title="6.Install the Fluid theme"></a>6.Install the Fluid theme</h1><p>Enter the Hexo directory and execute the command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><h2 id="Specify-the-theme"><a href="#Specify-the-theme" class="headerlink" title="Specify the theme"></a>Specify the theme</h2><p>Modify the configuration file to set the website theme to “fluid.”</p><p>Make the following modifications in the <code>_config.yml</code> file within your Hexo directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme: fluid  <span class="hljs-comment"># Specify the theme</span><br>language: en  <span class="hljs-comment"># Specify the language, which can affect the language displayed in the theme. Modify it as needed.</span><br></code></pre></td></tr></table></figure><p>All configuration files in <code>_config.yml</code> are as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Hexo Configuration</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span><br><br><span class="hljs-comment"># Site</span><br>title: <span class="hljs-string">&#x27;10:36&#x27;</span><br>subtitle: <span class="hljs-string">&#x27;&#x27;</span><br>description: <span class="hljs-string">&#x27;&#x27;</span><br>keywords:<br>author: Chenye Meng<br>language: en<br>timezone: <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br>url: https://nexmaker-fab.github.io/2023zjude-10-36/<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  trailing_html: <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><br><span class="hljs-comment"># Directory</span><br>source_dir: <span class="hljs-built_in">source</span><br>public_dir: public<br>tag_dir: tags<br>archive_dir: archives<br>category_dir: categories<br>code_dir: downloads/code<br>i18n_dir: :lang<br>skip_render:<br><br><span class="hljs-comment"># Writing</span><br>new_post_name: :title.md <span class="hljs-comment"># File name of new posts</span><br>default_layout: post<br>titlecase: <span class="hljs-literal">false</span> <span class="hljs-comment"># Transform title into titlecase</span><br>external_link:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span> <span class="hljs-comment"># Open external links in new tab</span><br>  field: site <span class="hljs-comment"># Apply to the whole site</span><br>  exclude: <span class="hljs-string">&#x27;&#x27;</span><br>filename_case: 0<br>render_drafts: <span class="hljs-literal">false</span><br>post_asset_folder: <span class="hljs-literal">false</span><br>relative_link: <span class="hljs-literal">false</span><br>future: <span class="hljs-literal">true</span><br>highlight:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>  line_number: <span class="hljs-literal">true</span><br>  auto_detect: <span class="hljs-literal">false</span><br>  tab_replace: <span class="hljs-string">&#x27;&#x27;</span><br>  wrap: <span class="hljs-literal">true</span><br>  hljs: <span class="hljs-literal">false</span><br>prismjs:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">false</span><br>  preprocess: <span class="hljs-literal">true</span><br>  line_number: <span class="hljs-literal">true</span><br>  tab_replace: <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># Home page setting</span><br><span class="hljs-comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)</span><br>index_generator:<br>  path: <span class="hljs-string">&#x27;&#x27;</span><br>  per_page: 10<br>  order_by: -<span class="hljs-built_in">date</span><br><br><span class="hljs-comment"># Category &amp; Tag</span><br>default_category: uncategorized<br>category_map:<br>tag_map:<br><br><span class="hljs-comment"># Metadata elements</span><br><span class="hljs-comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><br>meta_generator: <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Date / Time format</span><br><span class="hljs-comment">## Hexo uses Moment.js to parse and display date</span><br><span class="hljs-comment">## You can customize the date format as defined in</span><br><span class="hljs-comment">## http://momentjs.com/docs/#/displaying/format/</span><br>date_format: YYYY-MM-DD<br>time_format: HH:mm:ss<br><span class="hljs-comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span><br>updated_option: <span class="hljs-string">&#x27;mtime&#x27;</span><br><br><span class="hljs-comment"># Pagination</span><br><span class="hljs-comment">## Set per_page to 0 to disable pagination</span><br>per_page: 10<br>pagination_dir: page<br><br><span class="hljs-comment"># Include / Exclude file(s)</span><br><span class="hljs-comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><br>include:<br>exclude:<br>ignore:<br><br><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br>theme: fluid<br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  <span class="hljs-comment"># repo: git@github.com:mengcye/mengcye.github.io.git</span><br>  repo: https://github.com/NexMaker-Fab/2023zjude-10-36.git<br>  branch: main<br><br></code></pre></td></tr></table></figure><p>After making the modifications, access local preview to see that the website theme has been successfully changed.<br><img src="/2023zjude-10-36/img/webpage/homepage2.png"></p><h1 id="7-Create-document-pages"><a href="#7-Create-document-pages" class="headerlink" title="7.Create document pages"></a>7.Create document pages</h1><h2 id="Create「About-Page」"><a href="#Create「About-Page」" class="headerlink" title="Create「About Page」"></a>Create「About Page」</h2><p>Enter the following command in the command line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>After successfully creating it, modify <code>/source/about/index.md</code> and add the <code>layout</code> property.</p><p>Afterward, update the relevant content on the About Page, supporting Markdown and HTML.</p><h2 id="Create-a-new-article-page"><a href="#Create-a-new-article-page" class="headerlink" title="Create a new article page"></a>Create a new article page</h2><p>Enter the following command in the command line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new pagename<br></code></pre></td></tr></table></figure><p>The “pagename” is the title of the new page, and the page will be automatically created.</p><p>After successfully creating it, you can find the corresponding <code>.md</code> document in the <code>/source/_posts directory</code>. Click to edit the content, supporting Markdown and HTML.</p><h2 id="Add-images-to-the-page"><a href="#Add-images-to-the-page" class="headerlink" title="Add images to the page"></a>Add images to the page</h2><p>Import the images into the <code>/source/img</code> folder.<br><img src="/2023zjude-10-36/img/webpage/source.png"><br>Edit the article content and insert images.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">![](/img/clock.png)<br></code></pre></td></tr></table></figure><h2 id="Home-Page"><a href="#Home-Page" class="headerlink" title="Home Page"></a>Home Page</h2><p>Modify the homepage content in the <code>_config.fluid.yml</code> file.</p><p>Change the homepage title.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">navbar:<br>  blog_title: <span class="hljs-string">&quot;10:36 Team&quot;</span><br></code></pre></td></tr></table></figure><p>Edit the homepage typewriter text.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">slogan:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>  text: <span class="hljs-string">&quot;Hello! Welcome to the page of 10:36 Team!&quot;</span><br></code></pre></td></tr></table></figure><p>Change the site favicon.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Icon for browser tab</span><br>favicon: /img/clock1.png<br><br><span class="hljs-comment"># Icon for Apple touch</span><br>apple_touch_icon: /img/clock1.png<br></code></pre></td></tr></table></figure><p>Edit the menu bar content.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">menu:<br>    - &#123; key: <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span>&#125;<br>    - &#123; key: <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/archives/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>    - &#123; key: <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/categories/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span>&#125;<br>    - &#123; key: <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-built_in">link</span>: <span class="hljs-string">&quot;/about/&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>Navigation bar menu. <code>key</code> is used to associate languages&#x2F;*.yml. If there is no association, the value of <code>key</code> itself will be displayed; if <code>icon</code> is a css class, it can be omitted; adding <code>name</code> can force the display of the specified name</p><h1 id="8-Deployment"><a href="#8-Deployment" class="headerlink" title="8.Deployment"></a>8.Deployment</h1><p>Add deployment configuration in the <code>_config.yml</code> file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: git@github.com:mengcye/mengcye.github.io.git <span class="hljs-comment">#GitHub repository address for deployment.</span><br>  branch: main<br></code></pre></td></tr></table></figure><p>Before each deployment, it’s necessary to clear the existing static files, generate new static files, and then proceed with the deployment.</p><p>Execute the following commands in sequence:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Clear the current static files.</span><br>hexo clean<br>or <br>hexo cl<br><br><span class="hljs-comment">#Generate static files.</span><br>hexo generate<br>or<br>hexo g<br><br><span class="hljs-comment">#Deploy</span><br>hexo deploy<br>or <br>hexo d<br></code></pre></td></tr></table></figure><p>After a successful deployment, visit the corresponding GitHub Pages URL to view our website.</p><h1 id="9-The-final-homepage-display"><a href="#9-The-final-homepage-display" class="headerlink" title="9.The final homepage display"></a>9.The final homepage display</h1><p><img src="/2023zjude-10-36/img/webpage/homepage3.png"><br><img src="/2023zjude-10-36/img/webpage/homepage4.png"></p><h1 id="10-The-fold-and-file-relationship"><a href="#10-The-fold-and-file-relationship" class="headerlink" title="10.The fold and file relationship"></a>10.The fold and file relationship</h1><h2 id="The-Fold-Website-Structure"><a href="#The-Fold-Website-Structure" class="headerlink" title="The Fold (Website Structure)"></a>The Fold (Website Structure)</h2><p>In Hexo, the “fold” generally refers to the structure or layout of the website. This includes:</p><ol><li><p><strong>Themes</strong>: Determines the visual layout and style of the site.</p></li><li><p><strong>Source Folder</strong>: Contains all the content and resources for your site. This is usually divided into:</p><ul><li><code>_posts</code>: For blog posts.</li><li><code>_drafts</code>: For unpublished drafts.</li><li>Other folders: For pages like “About,” “Contact,” etc.</li></ul></li><li><p><strong>Public Folder</strong>: Generated after running <code>hexo generate</code>, containing the static HTML, CSS, and JavaScript files ready for deployment.</p></li><li><p><strong>Scaffolds</strong>: Templates for new posts, pages, etc.</p></li></ol><h2 id="The-Files-Content"><a href="#The-Files-Content" class="headerlink" title="The Files (Content)"></a>The Files (Content)</h2><p>Files in Hexo are primarily markdown (.md) files that contain the actual content of your site. These files have a specific relationship with the fold:</p><ol><li><p><strong>Front-matter</strong>: At the beginning of each markdown file, used to define metadata like title, date, categories, tags, etc. This metadata helps in organizing and displaying content on the site.</p></li><li><p><strong>Markdown Content</strong>: The main body of your posts or pages, written in Markdown for easy formatting. Hexo converts these markdown files into HTML during the generation process.</p></li><li><p><strong>Asset Folders</strong>: Optionally, each post can have an associated folder for assets (images, PDFs, etc.) named after the post.</p></li><li><p><strong>Static Files</strong>: Such as images, CSS, JavaScript, which are usually placed in the <code>source</code> folder and are copied as-is to the <code>public</code> folder upon generation.</p></li></ol><h2 id="Relationship-and-Workflow"><a href="#Relationship-and-Workflow" class="headerlink" title="Relationship and Workflow"></a>Relationship and Workflow</h2><ol><li><strong>Content Creation</strong>: You write markdown files in the <code>_posts</code> or <code>_drafts</code> folder.</li><li><strong>Organizing</strong>: Using front-matter, you categorize and tag your posts, which then dictates how they are displayed and organized on the site.</li><li><strong>Generation</strong>: When you run <code>hexo generate</code>, Hexo converts markdown files into HTML, applying the layout and styles defined in your theme.</li><li><strong>Deployment</strong>: The contents of the <code>public</code> folder are then ready to be deployed to a web server or hosting platform.</li></ol><p>In summary, in the Hexo framework, the fold (website structure and layout) and the files (content in markdown) are intimately connected. The files provide the content and metadata, while the fold determines how this content is presented and organized on the final website.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/sedbz/article/details/126032526">https://blog.csdn.net/sedbz/article/details/126032526</a></p><p><a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B</a></p><p><a href="https://blog.csdn.net/qq_36580022/article/details/127964463">https://blog.csdn.net/qq_36580022/article/details/127964463</a></p>]]></content>
    
    
    <categories>
      
      <category>WebPage</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023zjude-10-36/2023/10/16/hello-world/"/>
    <url>/2023zjude-10-36/2023/10/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
